@model Tabang_Hub.Utils.Lists
@{
    ViewBag.Title = "Index";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>

    <!-- CSS Files -->
    <link href="~/Content/Css/generalStyle.css" rel="stylesheet" />
    <link href="~/Content/Css/progress.css" rel="stylesheet" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link href="~/Content/Css/CustomeStyle.css" rel="stylesheet" />
</head>
<body>
    <div class="content">
        <!-- Your home page content goes here -->
        <h2>Volunteer Page</h2>
    </div>
    @if (Model.volunteersSkills.Count == 0)
    {
        <div class="popup-container" id="popup-container">
            <!-- First Step: Personal Information -->
            <div class="step-container" id="step1">
                <div class="step-header">
                    <div class="step-indicator">
                        <span class="step-number">1</span> of 2
                    </div>
                    <h2>Personal Information</h2>
                </div>
                <p class="subtext">Please fill in your personal details</p>
                <form id="personalInfoForm">
                    <div class="form-group">
                        <input type="text" class="form-control" id="firstName" placeholder="Firstname" required oninput="validateTextOnly(this)" onblur="validateTextOnly(this)">
                        <span class="error-message" id="firstNameError"></span>
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control" id="lastName" placeholder="Lastname" required oninput="validateTextOnly(this)" onblur="validateTextOnly(this)">
                        <span class="error-message" id="lastNameError"></span>
                    </div>
                    <div class="form-group">
                        <label for="birthday">Birthday</label>
                        <input type="date" class="form-control" id="birthday" required oninput="validateBirthday(this)" onblur="validateBirthday(this)">
                        <span class="error-message" id="birthdayError"></span>
                    </div>
                    <div class="form-group">
                        <input type="tel" class="form-control" id="phoneNumber" placeholder="Phone Number" required oninput="validatePhoneNumber(this)" onblur="validatePhoneNumber(this)" maxlength="11">
                        <span class="error-message" id="phoneNumberError"></span>
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control" id="street" placeholder="Street" required>
                        <span class="error-message" id="streetError"></span>
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control" id="city" placeholder="City" required oninput="validateTextOnly(this)" onblur="validateTextOnly(this)">
                        <span class="error-message" id="cityError"></span>
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control" id="province" placeholder="Province" required oninput="validateTextOnly(this)" onblur="validateTextOnly(this)">
                        <span class="error-message" id="provinceError"></span>
                    </div>
                    <div class="form-group">
                        <input type="text" class="form-control" id="zipCode" placeholder="Zip code" required oninput="validateZipCode(this)" onblur="validateZipCode(this)" maxlength="4">
                        <span class="error-message" id="zipCodeError"></span>
                    </div>
                    <div class="form-group">
                        <label for="gender">Gender</label>
                        <select class="form-control" id="gender" required oninput="validateForm()" onblur="validateForm()">
                            <option value="">Select Gender</option>
                            <option value="male">Male</option>
                            <option value="female">Female</option>
                        </select>
                    </div>
                </form>
                <div class="btn-container">
                    <button type="button" class="btn btn-primary btn-lg btn-block btn-disabled" id="nextButton" onclick="nextStep()" disabled>Next</button>
                </div>
            </div>

            <!-- Second Step: Skill Selection -->
            <div class="step-container" id="step2" style="display: none;">
                <div class="step-header">
                    <i class="fas fa-arrow-left back-icon" onclick="prevStep()"></i>
                    <h2>What skills do you have?</h2>
                </div>
                <p class="subtext">This will customize your new home feed</p>
                <div class="step-content">
                    <div class="grid-container">
                        @foreach (var skillImage in Model.skills)
                        {
                            <div class="grid-item" onclick="toggleSkill(this)">
                                <img src="~/SkillsImages/@skillImage.skillImage" class="selectable" data-skill="@skillImage.skillName">
                                <span>@skillImage.skillName</span>
                            </div>
                        }
                    </div>
                </div>
                <div class="step-footer">
                    <button class="btn btn-disabled" id="completeButton" onclick="completeRegistration()" disabled>Submit</button>
                </div>
            </div>
        </div>
    }
    else
    {
        <h1>Content sa mga na a nay skills</h1>
    }

    <!-- JavaScript Files -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script src="~/Content/Js/SaveDataInfo.js"></script>

    @*<script>
        function nextStep() {
            document.getElementById('step1').style.display = 'none';
            document.getElementById('step2').style.display = 'flex';
            validateSkills(); // Initial validation check for the second step
        }

        function prevStep() {
            document.getElementById('step2').style.display = 'none';
            document.getElementById('step1').style.display = 'flex';
        }

        function completeRegistration() {
            const formData = {
                fname: document.getElementById('firstName').value,
                lname: document.getElementById('lastName').value,
                bday: document.getElementById('birthday').value,
                phoneNum: document.getElementById('phoneNumber').value,
                street: document.getElementById('street').value,
                city: document.getElementById('city').value,
                province: document.getElementById('province').value,
                zipCode: document.getElementById('zipCode').value,
                gender: document.getElementById('gender').value,
            };

            var storeSkill = Array.from(document.querySelectorAll('.grid-item.selected'))
                .map(skill => skill.querySelector('span').textContent.trim());

            console.log('Form Data:', formData);
            console.log('Selected Skills:', storeSkill);

            SaveDatas(formData, storeSkill);
        }

        function SaveDatas(formData, storeSkill) {
            console.log("Save informations Function: ", formData);
            console.log("Log Selected Skills: ", storeSkill);

            $.ajax({
                type: 'POST',
                url: '/Volunteer/SaveInformation',
                contentType: 'application/json',
                data: JSON.stringify({
                    model: formData,
                    volunteerSkill: storeSkill
                }),
                success: function (response) {
                    console.log("Response is: ", response);
                    location.reload();
                },
                error: function (xhr, status, error) {
                    console.log("Error response is: ", error);
                }
            });
        }

        function toggleSkill(element) {
            element.classList.toggle('selected');
            validateSkills();
        }

        function validateTextOnly(input) {
            const errorMessage = document.getElementById(input.id + 'Error');
            if (/[^a-zA-Z\s-ñÑ-]/.test(input.value)) {
                input.value = input.value.replace(/[^a-zA-Z\s-ñÑ-]/g, '');
                errorMessage.textContent = 'Invalid input. Only letters and dashes are allowed.';
                errorMessage.style.color = 'red';
            } else {
                errorMessage.textContent = '';
            }
            validateForm();
        }

        function validateBirthday(input) {
            const errorMessage = document.getElementById('birthdayError');
            const birthdayDate = new Date(input.value);
            const today = new Date();
            let age = today.getFullYear() - birthdayDate.getFullYear();
            const monthDifference = today.getMonth() - birthdayDate.getMonth();

            if (monthDifference < 0 || (monthDifference === 0 && today.getDate() < birthdayDate.getDate())) {
                age--;
            }

            if (isNaN(age) || age < 18) {
                errorMessage.textContent = 'You must be 18 years or older.';
                errorMessage.style.color = 'red';
            } else {
                errorMessage.textContent = '';
            }
            validateForm();
        }

        function validatePhoneNumber(input) {
            const errorMessage = document.getElementById('phoneNumberError');
            input.value = input.value.replace(/[^0-9]/g, '');
            if (!/^09\d{9}$/.test(input.value)) {
                errorMessage.textContent = 'Phone number must be 11 digits and start with "09".';
                errorMessage.style.color = 'red';
            } else {
                errorMessage.textContent = '';
            }
            validateForm();
        }

        function validateZipCode(input) {
            const errorMessage = document.getElementById('zipCodeError');
            input.value = input.value.replace(/[^0-9]/g, '');
            if (!/^\d{4}$/.test(input.value)) {
                errorMessage.textContent = 'Zip code must be exactly 4 digits.';
                errorMessage.style.color = 'red';
            } else {
                errorMessage.textContent = '';
            }
            validateForm();
        }

        function validateForm() {
            const firstName = document.getElementById('firstName').value;
            const lastName = document.getElementById('lastName').value;
            const birthday = document.getElementById('birthday').value;
            const phoneNumber = document.getElementById('phoneNumber').value;
            const street = document.getElementById('street').value;
            const city = document.getElementById('city').value;
            const province = document.getElementById('province').value;
            const zipCode = document.getElementById('zipCode').value;
            const gender = document.getElementById('gender').value;

            const firstNameError = document.getElementById('firstNameError').textContent;
            const lastNameError = document.getElementById('lastNameError').textContent;
            const birthdayError = document.getElementById('birthdayError').textContent;
            const phoneNumberError = document.getElementById('phoneNumberError').textContent;
            const zipCodeError = document.getElementById('zipCodeError').textContent;

            const isValid = firstName && lastName && birthday && phoneNumber && street && city && province && zipCode && gender &&
                !firstNameError && !lastNameError && !birthdayError && !phoneNumberError && !zipCodeError;

            const nextButton = document.getElementById('nextButton');
            nextButton.disabled = !isValid;
            if (isValid) {
                nextButton.classList.remove('btn-disabled');
            } else {
                nextButton.classList.add('btn-disabled');
            }
        }

        function validateSkills() {
            const selectedSkills = document.querySelectorAll('.grid-item.selected').length;
            const completeButton = document.getElementById('completeButton');
            completeButton.disabled = selectedSkills === 0;
            if (selectedSkills > 0) {
                completeButton.classList.remove('btn-disabled');
            } else {
                completeButton.classList.add('btn-disabled');
            }
        }
    </script>*@
</body>
</html>
