﻿@model Tabang_Hub.Utils.Lists

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Tabang-Hub</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css" rel="stylesheet">
    <link href="~/Content/css2/Style.css" rel="stylesheet" />

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="~/Scripts/jquery-1.6.4.min.js"></script>
    <script src="~/Scripts/jquery.signalR-2.4.3.min.js"></script>
    <script src="~/signalr/hubs"></script>

    <!-- CSS Template -->
    <link href="~/Content/css2/Template-css/bootstrap.min.css" rel="stylesheet" />
    <link href="~/Content/css2/" rel="stylesheet" />
    <link href="~/Content/css2/Template-css/templatemo-kind-heart-charity.css" rel="stylesheet" />
    <link href="~/Content/css2/notif.css" rel="stylesheet" />
    <link href="~/Content/css2/Search.css" rel="stylesheet" />
    <style>
        .suggestion-image {
            width: 40px; /* Adjust width as needed */
            height: 40px; /* Adjust height as needed */
            border-radius: 5px; /* Optional: Add a border radius for a rounded effect */
            object-fit: cover; /* Ensures the image doesn't stretch */
        }

        #suggestions {
            max-height: 250px; /* Adjust the height as needed to display 5 items */
            overflow-y: auto; /* Enables scrolling if content exceeds max-height */
            border: 1px solid #ccc; /* Optional: Add a border for better visibility */
            border-radius: 5px; /* Optional: Rounded corners */
        }
    </style>
</head>
<body id="section_1">
    <nav class="navbar navbar-expand-lg bg-light shadow-lg">
        <div class="container">
            <a class="navbar-brand" href="/">
                <img src="~/Content/images2/tabanghub3-No-Background.png" class="logo-i img-fluid" alt="Tabang Hub Volunteering Community">
                <span>
                    Tabang Hub
                    <small>Volunteering Community</small>
                </span>
            </a>

            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarNav">
                @if (User.Identity.IsAuthenticated)
                {
                    if (ViewBag.Title != "Message")
                    {
                        <!-- SEARCH BAR -->
                        <div class="search-container">
                            <div class="input-wrapper">
                                <input type="text" id="search-input" placeholder=" " oninput="filterSuggestions()" onfocus="showSuggestions()" onblur="hideSuggestions()">
                                <label for="search-input" class="floating-label">Search event</label>
                            </div>
                            <button class="search-button">
                                <i class="fa fa-search"></i>
                            </button>

                            <!-- Suggestion Item with Online Image -->
                            <div id="suggestions" class="suggestions">
                                @foreach (var eventSuggest in Model.listOfEvents.Where(m => m.End_Date >= DateTime.Now))
                                {
                                    <div class="suggestion-item d-flex align-items-center" 
                                         data-event-name="@eventSuggest.Event_Name" 
                                         data-event-id="@eventSuggest.Event_Id"
                                         onclick="handleSuggestionClick(this)">
                                        @{
                                            var imgs = Model.detailsEventImage.Where(m => m.eventId == eventSuggest.Event_Id).Select(m => m.eventImage).FirstOrDefault();
                                        }
                                        <img src="@Url.Content("~/Content/Events/" + imgs)" alt="@eventSuggest.Event_Name" class="suggestion-image me-2">
                                        <div>
                                            @eventSuggest.Event_Name <span></span>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }


                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item">
                            <a class="nav-link click-scroll" href="#top">Home</a>
                        </li>

                        <li class="nav-item">
                            <a class="nav-link click-scroll" href="#section_2">About</a>
                        </li>

                        <!-- Notification Bell -->
                        <li class="nav-item dropdown">
                            <a class="nav-link" href="#" id="notificationBell" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi bi-bell-fill"></i>
                                <span id="notificationCount" class="badge rounded-pill bg-danger" style="display: none;">0</span>
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end" id="notificationDropdown" style="width: 350px; max-height: 400px; overflow-y: auto;">
                                <!-- Notifications will be loaded here -->
                            </ul>
                        </li>

                        <li class="nav-item">
                            <a class="nav-link click-scroll" href="@Url.Action("Message", "Message")">
                                <i class="bi bi-chat-right-heart-fill"></i>
                            </a>
                        </li>


                        <!-- User Profile Dropdown -->
                        <li class="nav-item dropdown">
                            @foreach (var pf in Model.volunteersInfo)
                            {
                                <a class="nav-link " href="#" id="userDropdown" data-bs-toggle="dropdown">
                                    <div class="user-menu d-flex">
                                        <div class="user-name text-end me-3">
                                            @if (!string.IsNullOrEmpty(pf.lName) && !string.IsNullOrEmpty(pf.fName))
                                            {
                                                <p class="mb-0 text-sm text-gray-600">
                                                    @pf.lName.Substring(0, 1).ToUpper()@pf.lName.Substring(1),
                                                    @pf.fName.Substring(0, 1).ToUpper()@pf.fName.Substring(1)
                                                </p>
                                            }
                                        </div>
                                        <div class="user-img d-flex align-items-center">
                                            <div class="avatar avatar-md">
                                                @if (Model.picture.Count() > 0)
                                                {
                                                    foreach (var pic in Model.picture)
                                                    {
                                                        <img src="~/UserProfile/@pic.profilePath" class="rounded-circle" alt="Profile" width="30" height="30">
                                                    }
                                                }
                                                else
                                                {
                                                    <i class="icon-mid bi bi-person me-2"></i>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                                    <li><a class="dropdown-item" href="~/Volunteer/VolunteerProfile"><i class="icon-mid bi bi-person me-2"></i> My Profile</a></li>
                                    <li><a class="dropdown-item" href="~/Volunteer/DonationHistory"><i class="bi bi-wallet2"></i> Donation History</a></li>
                                    <li><a class="dropdown-item" href="~/Volunteer/Participate"><i class="bi bi-kanban"></i> Manage Events</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item" href="~/Page/Logout"><i class="icon-mid bi bi-box-arrow-left me-2"></i> Logout</a></li>
                                </ul>
                            }
                        </li>
                    </ul>
                }
            </div>
        </div>
    </nav>
    @RenderBody()

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    
    <!--<script src="~/Content/Js/JavaScript.js"></script>-->
    <!-- JS for fetching notifications and handling SignalR -->
    @if (User.Identity.IsAuthenticated)
    {
        <script>
            $(document).ready(function () {
                fetchUnreadNotifications();
                setInterval(fetchUnreadNotifications, 5000);

                function fetchUnreadNotifications() {
                    $.ajax({
                        url: '@Url.Action("GetUnreadNotifications", "Organization")',
                        type: 'GET',
                        success: function (data) {
                            let unreadCount = data.length;
                            updateNotificationCount(unreadCount);

                            if (unreadCount > 0) {
                                let notificationsHtml = '<li><h6 class="dropdown-header">Notifications</h6></li>';
                                data.forEach(notification => {
                                    notificationsHtml += `
                                        <li>
                                            <a href="#" class="dropdown-item notification-item" data-notification-id="${notification.notificationId}" style="white-space: normal;">
                                                <div class="d-flex align-items-start">
                                                    <div>
                                                        ${notification.content}
                                                    </div>
                                                </div>
                                            </a>
                                        </li>`;
                                });
                                $('#notificationDropdown').html(notificationsHtml);
                            } else {
                                $('#notificationDropdown').html('<li><a class="dropdown-item">No new notifications</a></li>');
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("Error fetching unread notifications:", error);
                        }
                    });
                }

                function updateNotificationCount(count) {
                    const notificationCountElement = $('#notificationCount');
                    if (count > 0) {
                        notificationCountElement.text(count).show();
                    } else {
                        notificationCountElement.hide();
                    }
                }

                $(document).on('click', '.notification-item', function (e) {
                    e.preventDefault();
                    var notificationId = $(this).data('notification-id');
                    var token = $('input[name="__RequestVerificationToken"]').val();
                    var $notificationItem = $(this);

                    $.ajax({
                        url: '@Url.Action("OpenNotification", "Volunteer")',
                        type: 'POST',
                        headers: {
                            "RequestVerificationToken": token
                        },
                        data: {
                            notificationId: notificationId
                        },
                        success: function (response) {
                            if (response.success) {
                                $notificationItem.closest('li').remove();
                                fetchUnreadNotifications();

                                if (response.redirectUrl) {
                                    window.location.href = response.redirectUrl;
                                }
                            } else {
                                console.error('Failed to open notification:', response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error opening notification:', error);
                        }
                    });
                });
            });

            function showSuggestions() {
                document.getElementById("suggestions").style.display = "block";
            }

            function hideSuggestions() {
                setTimeout(function () {
                    document.getElementById("suggestions").style.display = "none";
                }, 200); // Delay to allow click on suggestion
            }
            function filterSuggestions() {
                const input = document.getElementById('search-input').value.trim();
                if (input.length === 0) {
                    document.getElementById('suggestions').style.display = 'none';
                    return;
                }

                $.ajax({
                    url: '@Url.Action("GetFilteredEvents", "Page")',
                    type: 'GET',
                    data: { searchTerm: input },
                    success: function (data) {
                        const suggestionsContainer = document.getElementById('suggestions');
                        suggestionsContainer.innerHTML = ''; // Clear existing suggestions

                        if (data.length > 0) {
                            data.forEach(event => {
                                const item = document.createElement('div');
                                item.className = 'suggestion-item d-flex align-items-center';
                                item.setAttribute('data-event-id', event.Event_Id);
                                item.onclick = function () {
                                    handleSuggestionClick(this);
                                };

                                item.innerHTML = `
                    <img src="/Content/Events/${event.EventImage}" alt="${event.Event_Name}" class="suggestion-image me-2">
                    <div>${event.Event_Name}</div>
                `;

                                suggestionsContainer.appendChild(item);
                            });

                            suggestionsContainer.style.display = 'block'; // Show suggestions
                        } else {
                            suggestionsContainer.style.display = 'none'; // Hide if no matches
                        }
                    },
                    error: function () {
                        console.error('Error fetching suggestions.');
                    }
                });
            }

            function handleSuggestionClick(element) {
                const eventId = element.getAttribute('data-event-id');
                window.location.href = '@Url.Action("EventDetails", "Volunteer")' + '?eventId=' + eventId;
                console.log(eventId);
            }

            function debounce(func, delay) {
                let timeout;
                return function () {
                    const context = this, args = arguments;
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(context, args), delay);
                };
            }

            const filterSuggestionsDebounced = debounce(filterSuggestions, 300); // Adjust delay as needed

            document.getElementById('search-input').addEventListener('input', filterSuggestionsDebounced);

        </script>
    }
</body>
</html>