﻿@model Tabang_Hub.Utils.Lists

@{
    ViewBag.Title = "VolunteerManagement";
    Layout = "~/Views/Shared/_Organization.cshtml";
}

<style>
    .navbar-nav .nav-link {
        padding-left: 10px;
        padding-right: 10px;
        white-space: nowrap;
        font-size: 14px;
        position: relative;
    }

        .navbar-nav .nav-link.active::after {
            content: "";
            display: block;
            width: 100%;
            height: 2px;
            background-color: #5BC1AC;
            position: absolute;
            bottom: -5px;
            left: 0;
        }

    .content-section {
        display: none;
    }

        .content-section.active {
            display: block;
        }

    .navbar-center {
        display: flex;
        justify-content: center;
        width: 100%;
    }

    .fixed-size-img {
        width: 100%;
        max-height: 450px;
        object-fit: cover;
    }

    .profile-img {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border-radius: 50%;
    }

    .profile-card {
        padding: 15px;
        border: 1px solid #ced4da;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        background-color: white;
    }

    .skills-container {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        margin-top: 10px;
    }

    .skill-button {
        padding: 3px 8px;
        font-size: 12px;
        border: 1px solid #ced4da;
        border-radius: 5px;
        background-color: #f8f9fa;
        cursor: pointer;
    }

        .skill-button.selected {
            background-color: #007bff;
            color: white;
            border-color: #007bff;
        }

        .skill-button:disabled {
            cursor: not-allowed;
            background-color: #e9ecef;
        }

    .list-group-item {
        display: flex;
        align-items: center;
        border: 1px solid #ced4da;
        border-radius: 5px;
        margin-bottom: 10px;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
    }

        .list-group-item .badge {
            font-size: 0.75em;
        }

    .progress {
        height: 30px;
        background-color: #e9ecef;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
        position: relative;
    }

    .progress-bar {
        background-color: #007bff;
        line-height: 30px;
        color: white;
        text-align: center;
        transition: width 0.6s ease;
    }

    .progress-text {
        position: absolute;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        color: black;
        z-index: 2;
    }

    .progress-bar-container {
        position: relative;
    }

    .edit-button {
        position: absolute;
        top: 10px;
        right: 10px;
    }
</style>

@if (Model.eventDetails.End_Date > DateTime.Now)
{
<div class="container mt-5">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4">
        <div class="container">
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse navbar-center" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item"><a class="nav-link active" href="#organization-details" onclick="showSection('organization-details', event)">Details</a></li>
                    <li class="nav-item"><a class="nav-link" href="#volunteer-list" onclick="showSection('volunteer-list', event)">Volunteer List</a></li>
                    <li class="nav-item"><a class="nav-link" href="#applied-volunteer-list" onclick="showSection('applied-volunteer-list', event)">Applied Volunteer List</a></li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Organization Profile Section -->
    <div id="organization-details" class="content-section active">
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="profile-card d-flex align-items-center">
                    <img src="@Url.Content("~/Content/images/tabanghub3.png")" class="profile-img me-3" alt="Organization Profile">
                    <div>
                        <h4>@Model.OrgInfo.orgName</h4>
                        <p>@Model.OrgInfo.orgDescription</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Event Details -->
        <div class="row d-flex align-items-stretch">
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="card-body d-flex flex-column">
                        <div id="carouselExampleFade" class="carousel slide carousel-fade flex-grow-1" data-bs-ride="carousel">
                            <ol class="carousel-indicators">
                                @for (int i = 0; i < Model.detailsEventImage.Count; i++)
                                {
                                    <li data-bs-target="#carouselExampleFade" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")"></li>
                                }
                            </ol>
                            <div class="carousel-inner h-100">
                                @for (int i = 0; i < Model.detailsEventImage.Count; i++)
                                {
                                    <div class="carousel-item @(i == 0 ? "active" : "") h-100">
                                        <img src="@Url.Content("~/Content/Events/" + Model.detailsEventImage[i].eventImage)" class="d-block w-100 h-100" alt="Event Image @i" style="object-fit: cover;" />
                                    </div>
                                }
                            </div>
                            <a class="carousel-control-prev" href="#carouselExampleFade" role="button" data-bs-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Previous</span>
                            </a>
                            <a class="carousel-control-next" href="#carouselExampleFade" role="button" data-bs-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Next</span>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">Event Details</h5>
                        <button class="btn btn-outline-primary edit-button" data-bs-toggle="modal" data-bs-target="#editEventModal">Edit</button>
                    </div>
                    <div class="card-body d-flex flex-column">
                        <ul class="list-group list-group-flush flex-grow-1">
                            <h5 class="card-title">@Model.eventDetails.Event_Name</h5>
                            <p class="card-text">@Model.eventDetails.Description</p>
                            <li class="list-group-item"><i class="bi bi-people me-2"></i><strong>Max Volunteer:</strong> @Model.eventDetails.Maximum_Volunteer</li>
                            <li class="list-group-item"><i class="bi bi-calendar me-2"></i><strong>Date Started:</strong> @Model.eventDetails.Start_Date</li>
                            <li class="list-group-item"><i class="bi bi-calendar me-2"></i><strong>Date Ended:</strong> @Model.eventDetails.End_Date</li>
                            <li class="list-group-item"><i class="bi bi-geo-alt me-2"></i><strong>Location:</strong> @Model.eventDetails.Location</li>
                        </ul>
                    </div>
                    @if (Model.eventDetails.Target_Amount != null)
                    {
                        <div class="card-body">
                            <h5 class="card-title">Target Amount</h5>
                            @{
                                decimal? raisedAmount = 0;

                                foreach (var donated in Model.listofUserDonated)
                                {
                                    raisedAmount += donated.amount;
                                }

                                var percentage = (raisedAmount / Model.eventDetails.Target_Amount) * 100;
                            }
                            <div class="progress-bar-container">
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" style="width: @percentage%" aria-valuenow="@raisedAmount" aria-valuemin="0" aria-valuemax="@Model.eventDetails.Target_Amount"></div>
                                    <div class="progress-text">
                                        @($"{raisedAmount:₱#,##0.00}") / @($"{Model.eventDetails.Target_Amount:₱#,##0.00}")
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="card-body">
                        <h5 class="card-title">Skills Needed</h5>
                        <div class="skills-container" id="skills-container">
                            @foreach (var skill in Model.detailsSkillRequirement)
                            {
                                <button type="button" class="skill-button" data-skill-id="@skill.skillRequirementId">@skill.Skills.skillName</button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Volunteer List Section -->
    <div id="volunteer-list" class="content-section">
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title">Volunteer List</h5>
                    </div>
                    <div class="card-body">
                        <div class="list-group">
                            @foreach (var volunteer in Model.listOfEventVolunteers)
                            {
                                if (volunteer.Status == 1)
                                {
                                    <div class="list-group-item list-group-item-action d-flex align-items-center">
                                        <img src="@Url.Content("~/Content/images/organization.png")" class="profile-img me-3" alt="Volunteer Image">
                                        <div class="flex-grow-1">
                                            <p class="mb-0"><strong>Email:</strong> @volunteer.UserAccount.email</p>
                                            <p class="mb-0">
                                                <strong>Skills:</strong>
                                                @foreach (var skill in Model.volunteersSkills)
                                                {
                                                    if (skill.userId == volunteer.userId)
                                                    {
                                                        <span class="badge bg-secondary me-1">@skill.Skills.skillName</span>
                                                    }
                                                }
                                            </p>
                                        </div>
                                        <div class="ms-auto">
                                            <a href="@Url.Action("VolunteerDetails", "Organization", new { userId = volunteer.userId })" class="btn btn-outline-primary btn-sm">View</a>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Applied Volunteer List Section -->
    <div id="applied-volunteer-list" class="content-section">
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title">Applied Volunteer List</h5>
                    </div>
                    <div class="card-body">
                        <div class="list-group">
                            @foreach (var volunteer in Model.listOfEventVolunteers)
                            {
                                if (volunteer.Status == 0)
                                {
                                    <div class="list-group-item list-group-item-action d-flex align-items-center">
                                        <img src="@Url.Content("~/Content/images/organization.png")" class="profile-img me-3" alt="Volunteer Image">
                                        <div class="flex-grow-1">
                                            <p class="mb-0"><strong>Email:</strong> @volunteer.UserAccount.email</p>
                                            <p class="mb-0">
                                                <strong>Skills:</strong>
                                                @foreach (var skill in Model.volunteersSkills)
                                                {
                                                    if (skill.userId == volunteer.userId)
                                                    {
                                                        <span class="badge bg-secondary me-1">@skill.Skills.skillName</span>
                                                    }
                                                }
                                            </p>
                                        </div>
                                        <div class="ms-auto">
                                            <a href="@Url.Action("VolunteerDetails", "Organization", new { userId = volunteer.userId })" class="btn btn-outline-primary btn-sm">View</a>
                                            <form action="@Url.Action("ConfirmApplicants", "Organization")" method="post" class="confirm-form" data-volunteer-id="@volunteer.userId" data-event-id="@volunteer.eventId" style="display: inline;">
                                                <input type="hidden" name="id" value="@volunteer.userId" />
                                                <input type="hidden" name="eventId" value="@volunteer.eventId" />
                                                <button type="button" class="btn btn-outline-success btn-sm confirm-button">Confirm</button>
                                            </form>
                                            <form action="@Url.Action("DeclineApplicants", "Organization")" method="post" class="decline-form" data-volunteer-id="@volunteer.userId" data-event-id="@volunteer.eventId" style="display: inline;">
                                                <input type="hidden" name="id" value="@volunteer.userId" />
                                                <input type="hidden" name="eventId" value="@volunteer.eventId" />
                                                <button type="button" class="btn btn-outline-danger btn-sm decline-button">Decline</button>
                                            </form>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Event Modal -->
    <div class="modal fade" id="editEventModal" tabindex="-1" aria-labelledby="editEventModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editEventModalLabel">Edit Event</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form method="post" enctype="multipart/form-data" action="@Url.Action("EditEvent", "Organization")">
                        <input type="hidden" name="eventId" value="@Model.eventDetails.Event_Id" />
                        <div class="mb-3">
                            <label for="EditEvent_eventTitle" class="form-label">Event Title</label>
                            <input type="text" class="form-control" id="EditEvent_eventTitle" name="CreateEvents.eventTitle" value="@Model.eventDetails.Event_Name" placeholder="Enter event title">
                            <span class="error" id="EditEvent_eventTitle_error"></span>
                        </div>
                        <div class="mb-3">
                            <label for="EditEvent_eventDescription" class="form-label">Event Description</label>
                            <textarea class="form-control" id="EditEvent_eventDescription" name="CreateEvents.eventDescription" rows="4" placeholder="Enter event description">@Model.eventDetails.Description</textarea>
                            <span class="error" id="EditEvent_eventDescription_error"></span>
                        </div>
                        <div class="mb-3">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="editSwitchCheckDefault" onchange="toggleTargetAmount(this)" @(Model.eventDetails.Target_Amount != null ? "checked" : "")>
                                <label class="form-check-label" for="editSwitchCheckDefault">Enable Target Amount</label>
                            </div>
                            <input type="text" class="form-control mt-2" id="EditEvent_targetAmount" name="CreateEvents.targetAmount" value="@Model.eventDetails.Target_Amount" placeholder="Enter target amount in Peso" @(Model.eventDetails.Target_Amount == null ? "disabled" : "")>
                            <span class="error" id="EditEvent_targetAmount_error"></span>
                        </div>
                        <div class="mb-3">
                            <label for="EditEvent_maxVolunteer" class="form-label">Maximum Volunteers</label>
                            <input type="text" class="form-control" id="EditEvent_maxVolunteer" name="CreateEvents.maxVolunteer" value="@Model.eventDetails.Maximum_Volunteer" placeholder="Enter maximum volunteers">
                            <span class="error" id="EditEvent_maxVolunteer_error"></span>
                        </div>
                        <div class="mb-3 row">
                            <div class="col">
                                @{
                                    var strtdate = Model.eventDetails.Start_Date.ToString();

                                    <label for="EditEvent_dateStart" class="form-label">Start Date and Time</label>
                                    <input type="datetime-local" class="form-control" id="EditEvent_dateStart" name="CreateEvents.dateStart">
                                }
                                <span class="error" id="EditEvent_dateStart_error"></span>
                            </div>
                            <div class="col">
                                <label for="EditEvent_dateEnd" class="form-label">End Date and Time</label>
                                <input type="datetime-local" class="form-control" id="EditEvent_dateEnd" name="CreateEvents.dateEnd">
                                <span class="error" id="EditEvent_dateEnd_error"></span>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="EditEvent_location" class="form-label">Location</label>
                            <input type="text" class="form-control" id="EditEvent_location" name="CreateEvents.location" value="@Model.eventDetails.Location" placeholder="Enter location">
                            <span class="error" id="EditEvent_location_error"></span>
                        </div>
                        <div class="mb-3">
                            <label>Volunteer Skills Requirements</label>
                            <div class="added-skills" id="edit-added-skills">
                                @foreach (var skill in Model.detailsSkillRequirement)
                                {
                                    <div class="skill-item" id="skill-item-@skill.Skills.skillName">
                                        <button type="button" class="skill-button selected" onclick="removeEditSkill('@skill.Skills.skillName', this, document.getElementById('edit-skill-@skill.Skills.skillName'))">@skill.Skills.skillName <span class="remove-skill">x</span></button>
                                        <input type="number" class="form-control skill-count" name="skills[@skill.Skills.skillName]" value="@skill.totalNeeded" min="1" style="width: 60px; display: inline-block; margin-left: 10px;" />
                                    </div>
                                }
                            </div>

                            <!-- Hidden input for removed skills -->
                            <input type="hidden" id="skillsToRemove" name="skillsToRemove" value="" />
                            <div class="skills-container mb-3">
                                @foreach (var skills in Model.listOfSkills)
                                {
                                    <button type="button" class="btn btn-outline-primary skill-button" onclick="addEditSkill('@skills.skillName')" id="edit-skill-@skills.skillName" @(Model.detailsSkillRequirement.Any(s => s.Skills.skillName == skills.skillName) ? "disabled" : "")>@skills.skillName</button>
                                }
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="EditEvent_uploadImage" class="form-label">Upload Images</label>
                            <input type="file" class="form-control" id="EditEvent_uploadImage" name="images" multiple onchange="previewEditImages()">
                            <span class="error" id="EditEvent_uploadImage_error"></span>
                            <div class="preview-container" id="edit-image-preview"></div>
                        </div>
                        <button class="btn btn-primary" type="submit">Save Changes</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
}
else
{
<div class="container mt-5">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4">
        <div class="container">
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse navbar-center" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item"><a class="nav-link active" href="#organization-details" onclick="showSection('organization-details', event)">Details</a></li>
                    <li class="nav-item"><a class="nav-link" href="#volunteer-list" onclick="showSection('volunteer-list', event)">Volunteer List</a></li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Organization Profile Section -->
    <div id="organization-details" class="content-section active">
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="profile-card d-flex align-items-center">
                    <img src="@Url.Content("~/Content/images/tabanghub3.png")" class="profile-img me-3" alt="Organization Profile">
                    <div>
                        <h4>@Model.OrgInfo.orgName</h4>
                        <p>@Model.OrgInfo.orgDescription</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Event Details -->
        <div class="row d-flex align-items-stretch">
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="card-body d-flex flex-column">
                        <div id="carouselExampleFade" class="carousel slide carousel-fade flex-grow-1" data-bs-ride="carousel">
                            <ol class="carousel-indicators">
                                @for (int i = 0; i < Model.detailsEventImage.Count; i++)
                                {
                                    <li data-bs-target="#carouselExampleFade" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")"></li>
                                }
                            </ol>
                            <div class="carousel-inner h-100">
                                @for (int i = 0; i < Model.detailsEventImage.Count; i++)
                                {
                                    <div class="carousel-item @(i == 0 ? "active" : "") h-100">
                                        <img src="@Url.Content("~/Content/Events/" + Model.detailsEventImage[i].eventImage)" class="d-block w-100 h-100" alt="Event Image @i" style="object-fit: cover;" />
                                    </div>
                                }
                            </div>
                            <a class="carousel-control-prev" href="#carouselExampleFade" role="button" data-bs-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Previous</span>
                            </a>
                            <a class="carousel-control-next" href="#carouselExampleFade" role="button" data-bs-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Next</span>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">Event Details</h5>
                    </div>
                    <div class="card-body d-flex flex-column">
                        <ul class="list-group list-group-flush flex-grow-1">
                            <h5 class="card-title">@Model.eventDetails.Event_Name</h5>
                            <p class="card-text">@Model.eventDetails.Description</p>
                            <li class="list-group-item"><i class="bi bi-people me-2"></i><strong>Max Volunteer:</strong> @Model.eventDetails.Maximum_Volunteer</li>
                            <li class="list-group-item"><i class="bi bi-calendar me-2"></i><strong>Date Started:</strong> @Model.eventDetails.Start_Date</li>
                            <li class="list-group-item"><i class="bi bi-calendar me-2"></i><strong>Date Ended:</strong> @Model.eventDetails.End_Date</li>
                            <li class="list-group-item"><i class="bi bi-geo-alt me-2"></i><strong>Location:</strong> @Model.eventDetails.Location</li>
                        </ul>
                    </div>
                    @if (Model.eventDetails.Target_Amount != null)
                    {
                        <div class="card-body">
                            <h5 class="card-title">Target Amount</h5>
                            @{
                                decimal? raisedAmount = 0;

                                foreach (var donated in Model.listofUserDonated)
                                {
                                    raisedAmount += donated.amount;
                                }

                                var percentage = (raisedAmount / Model.eventDetails.Target_Amount) * 100;
                            }
                            <div class="progress-bar-container">
                                <div class="progress">
                                    <div class="progress-bar" role="progressbar" style="width: @percentage%" aria-valuenow="@raisedAmount" aria-valuemin="0" aria-valuemax="@Model.eventDetails.Target_Amount"></div>
                                    <div class="progress-text">
                                        @($"{raisedAmount:₱#,##0.00}") / @($"{Model.eventDetails.Target_Amount:₱#,##0.00}")
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="card-body">
                        <h5 class="card-title">Skills Needed</h5>
                        <div class="skills-container" id="skills-container">
                            @foreach (var skill in Model.detailsSkillRequirement)
                            {
                                <button type="button" class="skill-button" data-skill-id="@skill.skillRequirementId">@skill.Skills.skillName</button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Volunteer List Section -->
    <div id="volunteer-list" class="content-section">
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title">Volunteer List</h5>
                    </div>
                    <div class="card-body">
                        <div class="list-group">
                            @foreach (var volunteer in Model.listOfEventVolunteers)
                            {
                                if (volunteer.Status == 1)
                                {
                                    <div class="list-group-item list-group-item-action d-flex align-items-center" data-volunteer-id="@volunteer.userId">
                                        <img src="@Url.Content("~/Content/images/organization.png")" class="profile-img me-3" alt="Volunteer Image">
                                        <div class="flex-grow-1">
                                            <p class="mb-0"><strong>Email:</strong> @volunteer.UserAccount.email</p>
                                            <p class="mb-0">
                                                <strong>Skills:</strong>
                                                @foreach (var skill in Model.volunteersSkills)
                                                {
                                                    if (skill.userId == volunteer.userId)
                                                    {
                                                        <span class="badge bg-secondary me-1">@skill.Skills.skillName</span>
                                                    }
                                                }
                                            </p>
                                        </div>
                                        <div class="ms-auto">
                                            <!-- Rating Section for Each Volunteer -->
                                            <div class="form-group d-flex align-items-center mb-2">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    <div class="form-check me-2">
                                                        <input class="form-check-input" type="radio" name="rating_@volunteer.userId" value="@i" required>
                                                        <label class="form-check-label">@i</label>
                                                    </div>
                                                }
                                            </div>

                                            <!-- Attendance Section for Each Volunteer -->
                                            <div class="form-group d-flex align-items-center">
                                                <label class="me-2"><strong>Attendance:</strong></label>
                                                <div class="form-check me-2">
                                                    <input class="form-check-input" type="radio" name="attendance_@volunteer.userId" value="1" required>
                                                    <label class="form-check-label">Yes</label>
                                                </div>
                                                <div class="form-check me-2">
                                                    <input class="form-check-input" type="radio" name="attendance_@volunteer.userId" value="0" required>
                                                    <label class="form-check-label">No</label>
                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- Submit All Ratings Button -->
        <div class="row">
            <div class="col-md-12 text-center">
                <button type="button" class="btn btn-primary" id="submitAllRatings">Submit All Ratings</button>
            </div>
        </div>
    </div>
</div>
}

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
 document.getElementById('submitAllRatings').addEventListener('click', function () {
    var ratingsData = [];
    var attendanceData = [];
    var volunteerIds = [];

    // Loop through each volunteer and gather ratings and attendance data
    document.querySelectorAll('.list-group-item').forEach(function (item) {
        var volunteerId = item.getAttribute('data-volunteer-id');
        var rating = document.querySelector(`input[name="rating_${volunteerId}"]:checked`);
        var attendance = document.querySelector(`input[name="attendance_${volunteerId}"]:checked`);

        if (rating && attendance) {
            volunteerIds.push(volunteerId);
            ratingsData.push(rating.value);
            attendanceData.push(attendance.value);
        }
    });

    // Check if data is complete
    if (volunteerIds.length > 0) {
        // Send the data via AJAX
        $.ajax({
            url: '@Url.Action("SubmitRatings", "Organization")',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                eventId: @Model.eventDetails.Event_Id,
                volunteerIds: volunteerIds,
                ratings: ratingsData,
                attendance: attendanceData // Added attendance data
            }),
            success: function (response) {
                if (response.success) {
                    // Redirect to the Organization's EventsList after successful submission
                    window.location.href = '@Url.Action("EventsList", "Organization")';
                } else {
                    alert('Error: ' + response.message);
                }
            },
            error: function () {
                alert('Error submitting ratings.');
            }
        });
    } else {
        alert('Please rate and select attendance for all volunteers.');
    }
});

    function showSection(sectionId, event) {
        event.preventDefault();
        // Hide all sections
        document.querySelectorAll('.content-section').forEach(section => {
            section.classList.remove('active');
        });

        // Show the selected section
        document.getElementById(sectionId).classList.add('active');
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });
        event.target.classList.add('active');
    }

    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.confirm-button').forEach(button => {
            button.addEventListener('click', function () {
                const form = this.closest('.confirm-form');
                const volunteerId = form.getAttribute('data-volunteer-id');
                const eventId = form.getAttribute('data-event-id');

                Swal.fire({
                    title: 'Confirm Volunteer?',
                    text: "Are you sure you want to confirm this volunteer?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, confirm it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Submit the form to confirm the volunteer
                        form.submit();
                    }
                });
            });
        });

        document.querySelectorAll('.decline-button').forEach(button => {
            button.addEventListener('click', function () {
                const form = this.closest('.decline-form');
                const volunteerId = form.getAttribute('data-volunteer-id');
                const eventId = form.getAttribute('data-event-id');

                Swal.fire({
                    title: 'Decline Volunteer?',
                    text: "Are you sure you want to decline this volunteer?",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, decline it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Submit the form to decline the volunteer
                        form.submit();
                    }
                });
            });
        });

        // Real-time validation for date and time inputs
        document.getElementById('EditEvent_dateStart').addEventListener('input', function () {
            const dateStart = new Date(this.value);
            const now = new Date();
            if (dateStart < now) {
                document.getElementById('EditEvent_dateStart_error').innerText = 'Start date and time must be in the future.';
                this.value = '';
            } else {
                document.getElementById('EditEvent_dateStart_error').innerText = '';
            }
            validateEditEventDuration();
        });

        document.getElementById('EditEvent_dateEnd').addEventListener('input', function () {
            validateEditEventDuration();
        });

        function validateEditEventDuration() {
            const dateStart = new Date(document.getElementById('EditEvent_dateStart').value);
            const dateEnd = new Date(document.getElementById('EditEvent_dateEnd').value);
            const now = new Date();

            if (dateEnd < now) {
                document.getElementById('EditEvent_dateEnd_error').innerText = 'End date and time must be in the future.';
                document.getElementById('EditEvent_dateEnd').value = '';
                return;
            } else {
                document.getElementById('EditEvent_dateEnd_error').innerText = '';
            }

            if (dateEnd <= dateStart) {
                document.getElementById('EditEvent_dateEnd_error').innerText = 'End date and time must be after start date and time.';
                document.getElementById('EditEvent_dateEnd').value = '';
                return;
            }

            const hoursDifference = (dateEnd - dateStart) / (1000 * 60 * 60);
            if (hoursDifference < 3) {
                document.getElementById('EditEvent_dateEnd_error').innerText = 'Event duration must be at least 3 hours.';
                document.getElementById('EditEvent_dateEnd').value = '';
            } else {
                document.getElementById('EditEvent_dateEnd_error').innerText = '';
            }
        }

        // Add event listeners to ensure only numbers are entered
        function onlyNumbers(input, errorId) {
            input.addEventListener('input', function (e) {
                this.value = this.value.replace(/[^0-9]/g, '');
                if (isNaN(this.value) || this.value === '') {
                    document.getElementById(errorId).innerText = 'Please enter a valid number.';
                } else {
                    document.getElementById(errorId).innerText = '';
                }
            });
        }

        onlyNumbers(document.getElementById('EditEvent_targetAmount'), 'EditEvent_targetAmount_error');
        onlyNumbers(document.getElementById('EditEvent_maxVolunteer'), 'EditEvent_maxVolunteer_error');
    });

    function toggleTargetAmount(checkbox) {
        const targetAmountInput = document.getElementById('EditEvent_targetAmount');
        targetAmountInput.disabled = !checkbox.checked;
    }

    function addEditSkill(skillName) {
        const addedSkillsContainer = document.getElementById('edit-added-skills');
        const skillButton = document.getElementById(`edit-skill-${skillName}`);
        skillButton.disabled = true;

        const skillBadge = document.createElement('button');
        skillBadge.type = 'button';
        skillBadge.className = 'skill-button selected';
        skillBadge.innerHTML = `${skillName} <span class="remove-skill">x</span>`;
        skillBadge.onclick = function () {
            removeEditSkill(skillName, skillBadge, skillButton);
        };

        addedSkillsContainer.appendChild(skillBadge);

        // Create a hidden input to hold the skill value
        const skillInput = document.createElement('input');
        skillInput.type = 'hidden';
        skillInput.name = 'skills';
        skillInput.value = skillName;
        addedSkillsContainer.appendChild(skillInput);
    }

    function removeEditSkill(skillName, skillBadge, skillButton) {
        const skillsContainer = document.getElementById('edit-added-skills');

        if (skillsContainer.contains(skillBadge)) {
            skillsContainer.removeChild(skillBadge);
        }

        // Remove the hidden input when the skill is removed
        const skillInput = document.querySelector(`input[name="skills"][value="${skillName}"]`);
        if (skillInput && skillsContainer.contains(skillInput)) {
            skillsContainer.removeChild(skillInput);
        }

        // Enable the skill button when the skill is removed
        if (skillButton) {
            skillButton.disabled = false;
        }
    }

    function previewImages() {
        const previewContainer = document.getElementById('image-preview');
        const files = document.getElementById('CreateEvents_uploadImage').files;
        previewContainer.innerHTML = '';
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = document.createElement('img');
                img.src = e.target.result;
                img.classList.add('img-thumbnail', 'me-2', 'mb-2');
                previewContainer.appendChild(img);
            };
            reader.readAsDataURL(file);
        }
    }

    function previewEditImages() {
        const previewContainer = document.getElementById('edit-image-preview');
        const files = document.getElementById('EditEvent_uploadImage').files;
        previewContainer.innerHTML = '';
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const reader = new FileReader();
            reader.onload = function (e) {
                const img = document.createElement('img');
                img.src = e.target.result;
                img.classList.add('img-thumbnail', 'me-2', 'mb-2');
                previewContainer.appendChild(img);
            };
            reader.readAsDataURL(file);
        }
    }

    function validateEditForm() {
        let isValid = true;
        const form = document.getElementById('edit-event-form');
        const title = form['EditEvent.eventTitle'].value.trim();
        const description = form['EditEvent.eventDescription'].value.trim();
        const maxVolunteer = form['EditEvent.maxVolunteer'].value.trim();
        const dateStart = form['EditEvent.dateStart'].value.trim();
        const dateEnd = form['EditEvent.dateEnd'].value.trim();
        const location = form['EditEvent.location'].value.trim();
        const targetAmount = form['EditEvent.targetAmount'].value.trim();

        if (title === '') {
            document.getElementById('EditEvent_eventTitle_error').textContent = 'Title is required';
            isValid = false;
        } else {
            document.getElementById('EditEvent_eventTitle_error').textContent = '';
        }

        if (description === '') {
            document.getElementById('EditEvent_eventDescription_error').textContent = 'Description is required';
            isValid = false;
        } else {
            document.getElementById('EditEvent_eventDescription_error').textContent = '';
        }

        if (maxVolunteer === '' || isNaN(maxVolunteer) || parseInt(maxVolunteer) <= 0) {
            document.getElementById('EditEvent_maxVolunteer_error').textContent = 'Enter a valid number for max volunteers';
            isValid = false;
        } else {
            document.getElementById('EditEvent_maxVolunteer_error').textContent = '';
        }

        if (dateStart === '') {
            document.getElementById('EditEvent_dateStart_error').textContent = 'Start date is required';
            isValid = false;
        } else {
            document.getElementById('EditEvent_dateStart_error').textContent = '';
        }

        if (dateEnd === '') {
            document.getElementById('EditEvent_dateEnd_error').textContent = 'End date is required';
            isValid = false;
        } else {
            document.getElementById('EditEvent_dateEnd_error').textContent = '';
        }

        if (location === '') {
            document.getElementById('EditEvent_location_error').textContent = 'Location is required';
            isValid = false;
        } else {
            document.getElementById('EditEvent_location_error').textContent = '';
        }

        if (document.getElementById('editSwitchCheckDefault').checked && (targetAmount === '' || isNaN(targetAmount) || parseInt(targetAmount) <= 0)) {
            document.getElementById('EditEvent_targetAmount_error').textContent = 'Enter a valid target amount';
            isValid = false;
        } else {
            document.getElementById('EditEvent_targetAmount_error').textContent = '';
        }

        return isValid;
    }
</script>