@model Tabang_Hub.Utils.Lists

@{
    ViewBag.Title = "EventsList";
    Layout = "~/Views/Shared/_Organization.cshtml";
}

<!-- SweetAlert CSS -->
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">

<!-- Styles -->
<style>
    .modal-header {
        background-color: #5BC1AC;
        color: #fff;
    }

    .form-label {
        font-weight: bold;
        color: #333;
    }

    .form-control {
        border-radius: 0.375rem;
    }

    .btn-outline-primary {
        border-color: #5BC1AC;
        color: #5BC1AC;
    }

        .btn-outline-primary:hover {
            background-color: #5BC1AC;
            color: #fff;
        }

    .btn-primary {
        background-color: #5BC1AC;
        border-color: #5BC1AC;
    }

        .btn-primary:hover {
            background-color: #4aa89b;
            border-color: #4aa89b;
        }

    .preview-container img {
        max-width: 100px;
        margin-right: 10px;
        margin-bottom: 10px;
    }

    .error {
        color: red;
        font-size: 0.875rem;
    }

    .added-skills {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 10px;
    }

        .added-skills .skill-badge {
            background-color: #f0f0f0;
            color: #333;
            padding: 5px 15px;
            border-radius: 50px;
            display: inline-block;
            position: relative;
        }

    .skill-badge .remove-skill {
        color: #ff5a5f;
        margin-left: 10px;
        cursor: pointer;
        font-weight: bold;
    }

        .skill-badge .remove-skill:hover {
            color: #d9534f;
        }

    .skill-count {
        width: 60px;
        margin-left: 10px;
        text-align: center;
    }

    .skills-container .skill-button {
        border-color: #5BC1AC;
        color: #5BC1AC;
        margin: 5px;
    }

        .skills-container .skill-button:hover {
            background-color: #5BC1AC;
            color: white;
        }
</style>

<section class="section">
    <div class="row" id="table-head">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h4 class="card-title">Events List</h4>
                    <!-- Button to open the Create Event Modal -->
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createEventModal">
                        Create Event
                    </button>
                </div>
                <div class="card-content">
                    <!-- table head dark -->
                    <div class="table-responsive">
                        <table class="table mb-0">
                            <thead class="thead-dark">
                                <tr>
                                    <th>Event Name</th>
                                    <th>Total Donation</th>
                                    <th>Target Amount</th>
                                    <th>Total Volunteers</th>
                                    <th>Date Started</th>
                                    <th>Date Ended</th>
                                    <th>Location</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var list in Model.listOfEvents)
                                {
                                    <tr data-event-id="@list.Event_Id" style="cursor: pointer;" onclick="viewEventDetails(@list.Event_Id)">
                                        <td class="text-bold-500">@list.Event_Name</td>
                                        @if (list.Target_Amount != null && list.Target_Amount != 0)
                                        {
                                            if (list.Total_Donation != null && list.Total_Donation != 0)
                                            {
                                                <td>₱@list.Total_Donation</td>
                                                <td>₱@list.Target_Amount</td>
                                            }
                                            else
                                            {
                                                <td></td>
                                                <td>₱@list.Target_Amount</td>
                                            }
                                        }
                                        else
                                        {
                                            <td></td>
                                            <td></td>
                                        }
                                        <td>@list.Total_Volunteer</td>
                                        <td>@list.Start_Date</td>
                                        <td>@list.End_Date</td>
                                        <td>@list.Location</td>
                                        <td>
                                            <form class="delete-form" data-event-id="@list.Event_Id">
                                                <button type="button" class="btn btn-sm btn-danger delete-button">Delete</button>
                                            </form>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Create Event Modal -->
<div class="container mt-5">
    <div class="modal fade" id="createEventModal" tabindex="-1" aria-labelledby="createEventModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createEventModalLabel">Create Event</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="create-event-form" action="/Organization/CreateEvents" method="post" enctype="multipart/form-data" onsubmit="return validateForm(event)">
                        <div class="mb-3">
                            <label for="CreateEvents_eventTitle" class="form-label">Event Title</label>
                            <input type="text" class="form-control" id="CreateEvents_eventTitle" name="CreateEvents.eventTitle" placeholder="Enter event title">
                            <span class="error" id="CreateEvents_eventTitle_error"></span>
                        </div>
                        <div class="mb-3">
                            <label for="CreateEvents_eventDescription" class="form-label">Event Description</label>
                            <textarea class="form-control" id="CreateEvents_eventDescription" name="CreateEvents.eventDescription" rows="4" placeholder="Enter event description"></textarea>
                            <span class="error" id="CreateEvents_eventDescription_error"></span>
                        </div>
                        <div class="mb-3">
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault">
                                <label class="form-check-label" for="flexSwitchCheckDefault">Enable Target Amount</label>
                            </div>
                            <input type="text" class="form-control mt-2" id="CreateEvents_targetAmount" name="CreateEvents.targetAmount" placeholder="Enter target amount in Peso" disabled>
                            <span class="error" id="CreateEvents_targetAmount_error"></span>
                        </div>
                        <div class="mb-3 row">
                            <div class="col">
                                <label for="CreateEvents_dateStart" class="form-label">Start Date and Time</label>
                                <input type="datetime-local" class="form-control" id="CreateEvents_dateStart" name="CreateEvents.dateStart">
                                <span class="error" id="CreateEvents_dateStart_error"></span>
                            </div>
                            <div class="col">
                                <label for="CreateEvents_dateEnd" class="form-label">End Date and Time</label>
                                <input type="datetime-local" class="form-control" id="CreateEvents_dateEnd" name="CreateEvents.dateEnd">
                                <span class="error" id="CreateEvents_dateEnd_error"></span>
                            </div>
                        </div>
                        <!-- Map Container -->
                        <div class="mb-3">
                            <div id="map" style="height: 400px;"></div>
                        </div>
                        <div class="mb-3">
                            <label for="CreateEvents_location" class="form-label">Location</label>
                            <input type="text" class="form-control" id="CreateEvents_location" name="CreateEvents.location" placeholder="Enter location">
                            <span class="error" id="CreateEvents_location_error"></span>
                        </div>
                        <div class="mb-3">
                            <label for="CreateEvents_maxVolunteer" class="form-label">Maximum Volunteers</label>
                            <input type="number" class="form-control" id="CreateEvents_maxVolunteer" name="CreateEvents.maxVolunteer" min="1" placeholder="Enter maximum number of volunteers">
                            <span class="error" id="CreateEvents_maxVolunteer_error"></span>
                        </div>
                        <div class="mb-3">
                            <label>Volunteer Skills Requirements</label>
                            <div class="table-responsive" style="max-height: 200px; overflow-y: auto;">
                                <table class="table table-bordered">
                                    <thead class="table-light">
                                        <tr>
                                            <th>Skill</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody id="skills-table-body">
                                        <!-- Dynamic rows will be added here -->
                                    </tbody>
                                </table>
                            </div>
                            <span class="error" id="CreateEvents_skills_error"></span>
                        </div>

                        <!-- Skill Buttons to Add Skills -->
                        <div class="skills-container mb-3">
                            @foreach (var skills in Model.listOfSkills)
                            {
                                <button type="button" class="btn btn-outline-primary skill-button" onclick="addSkillToTable('@skills.skillName')" id="skill-@skills.skillName">@skills.skillName</button>
                            }
                        </div>
                        <div class="mb-3">
                            <label for="CreateEvents_uploadImage" class="form-label">Upload Images</label>
                            <input type="file" class="form-control" id="CreateEvents_uploadImage" name="images" multiple onchange="previewImages()">
                            <span class="error" id="CreateEvents_uploadImage_error"></span>
                            <div class="preview-container" id="image-preview"></div>
                        </div>

                        <button class="btn btn-primary" type="submit">Create Event</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- SweetAlert JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="~/Content/js/bootstrap.bundle.min.js"></script>
<script src="~/Content/vendors/perfect-scrollbar/perfect-scrollbar.min.js"></script>
<script src="~/Content/js/main.js"></script>

<script>

    $('#createEventModal').on('shown.bs.modal', function () {
        console.log('Modal shown. Initializing map.');

        // Coordinates for Lapu-Lapu City
        const lapuLapuCoords = [10.3140, 123.9495];

        // Initialize the map centered on Lapu-Lapu City
        window.leafletMap = L.map('map').setView(lapuLapuCoords, 13);

        // Add OpenStreetMap tile layer
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: 'Map data © OpenStreetMap contributors'
        }).addTo(window.leafletMap);

        // Add click event to the map
        window.leafletMap.on('click', function (e) {
            const latlng = e.latlng;
            const lat = latlng.lat;
            const lon = latlng.lng;

            // Use reverse geocoding to get the address
            const url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lon}`;

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    const address = data.display_name;
                    document.getElementById('CreateEvents_location').value = address;
                })
                .catch(error => {
                    console.error('Error in reverse geocoding:', error);
                    document.getElementById('CreateEvents_location').value = `${lat}, ${lon}`;
                });
        });
    });

    // Destroy the map when the modal is hidden
    $('#createEventModal').on('hidden.bs.modal', function () {
        if (window.leafletMap) {
            console.log('Modal hidden. Removing map.');
            window.leafletMap.remove();
            window.leafletMap = null;
        }
    });

    document.getElementById('flexSwitchCheckDefault').addEventListener('change', function () {
        const targetAmountInput = document.getElementById('CreateEvents_targetAmount');
        if (this.checked) {
            targetAmountInput.removeAttribute('disabled');
        } else {
            targetAmountInput.setAttribute('disabled', 'disabled');
            targetAmountInput.value = ''; // Clear the input value if disabled
        }
    });

    function validateForm(event) {
        event.preventDefault();
        let isValid = true;

        // Clear previous errors
        document.querySelectorAll('.error').forEach(e => e.innerHTML = '');

        // Validate event title
        const eventTitle = document.getElementById('CreateEvents_eventTitle');
        if (eventTitle.value.trim() === '') {
            document.getElementById('CreateEvents_eventTitle_error').innerText = 'Event title is required.';
            isValid = false;
        }

        // Validate event description
        const eventDescription = document.getElementById('CreateEvents_eventDescription');
        if (eventDescription.value.trim() === '') {
            document.getElementById('CreateEvents_eventDescription_error').innerText = 'Event description is required.';
            isValid = false;
        }

        // Validate start and end dates
        const dateStart = new Date(document.getElementById('CreateEvents_dateStart').value);
        const dateEnd = new Date(document.getElementById('CreateEvents_dateEnd').value);
        const now = new Date();

        if (dateStart < now) {
            document.getElementById('CreateEvents_dateStart_error').innerText = 'Start date and time must be in the future.';
            document.getElementById('CreateEvents_dateStart').value = '';
            isValid = false;
        }

        if (dateEnd <= dateStart) {
            document.getElementById('CreateEvents_dateEnd_error').innerText = 'End date and time must be after start date and time.';
            document.getElementById('CreateEvents_dateEnd').value = '';
            isValid = false;
        }

        const hoursDifference = (dateEnd - dateStart) / (1000 * 60 * 60);
        if (hoursDifference < 3) {
            document.getElementById('CreateEvents_dateEnd_error').innerText = 'Event duration must be at least 3 hours.';
            document.getElementById('CreateEvents_dateEnd').value = '';
            isValid = false;
        } else {
            document.getElementById('CreateEvents_dateEnd_error').innerText = '';
        }

        // Validate location
        const location = document.getElementById('CreateEvents_location');
        if (location.value.trim() === '') {
            document.getElementById('CreateEvents_location_error').innerText = 'Location is required.';
            isValid = false;
        }

        // Validate target amount is a number if not disabled
        const targetAmountInput = document.getElementById('CreateEvents_targetAmount');
        if (!targetAmountInput.disabled && isNaN(targetAmountInput.value)) {
            document.getElementById('CreateEvents_targetAmount_error').innerText = 'Target amount must be a number.';
            isValid = false;
        }

        // Validate maximum volunteers
        const maxVolunteersInput = document.getElementById('CreateEvents_maxVolunteer');
        const maxVolunteers = parseInt(maxVolunteersInput.value);
        if (isNaN(maxVolunteers) || maxVolunteers <= 0) {
            document.getElementById('CreateEvents_maxVolunteer_error').innerText = 'Maximum volunteers must be a positive number.';
            isValid = false;
        }

        // Validate skills
        const addedSkills = document.querySelectorAll('input[name="skills"]');
        if (addedSkills.length === 0) {
            document.getElementById('CreateEvents_skills_error').innerText = 'At least one skill is required.';
            isValid = false;
        } else {
            document.getElementById('CreateEvents_skills_error').innerText = ''; // Clear error if skills are added
        }

        if (!isValid) {
            return false;
        }

        // Prepare form data and submit
        const formData = new FormData(document.getElementById('create-event-form'));
        const xhr = new XMLHttpRequest();
        xhr.open('POST', '/Organization/CreateEvents', true);
        xhr.onload = function () {
            if (xhr.status === 200) {
                Swal.fire({
                    title: 'Success!',
                    text: 'The event has been created successfully.',
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => {
                    window.location.href = '/Organization/EventsList';
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'There was an error creating the event. Please try again.',
                    confirmButtonText: 'OK'
                });
            }
        };
        xhr.send(formData);
    }

    function addSkillToTable(skill) {
        const tableBody = document.getElementById('skills-table-body');
        const skillButton = document.getElementById(`skill-${skill}`);

        // Disable the button once the skill is added
        skillButton.disabled = true;

        // Create a new table row for the skill
        const row = document.createElement('tr');
        row.setAttribute('data-skill', skill);

        // Skill name cell
        const skillNameCell = document.createElement('td');
        skillNameCell.textContent = skill;
        row.appendChild(skillNameCell);

        // Hidden input to include the skill in the form submission
        const skillInput = document.createElement('input');
        skillInput.type = 'hidden';
        skillInput.name = 'skills';
        skillInput.value = skill;
        row.appendChild(skillInput);

        // Remove skill action cell
        const actionCell = document.createElement('td');
        const removeButton = document.createElement('button');
        removeButton.type = 'button';
        removeButton.className = 'btn btn-danger btn-sm';
        removeButton.textContent = 'Remove';
        removeButton.onclick = function () {
            removeSkillFromTable(skill, row, skillButton);
        };
        actionCell.appendChild(removeButton);
        row.appendChild(actionCell);

        // Append the row to the table body
        tableBody.appendChild(row);
    }

    function removeSkillFromTable(skill, row, skillButton) {
        const tableBody = document.getElementById('skills-table-body');
        tableBody.removeChild(row);

        // Re-enable the skill button when the skill is removed
        skillButton.disabled = false;
    }

    function previewImages() {
        const previewContainer = document.getElementById('image-preview');
        const files = document.getElementById('CreateEvents_uploadImage').files;
        previewContainer.innerHTML = '';
        for (let i = 0; i < files.length; i++) {
            const img = document.createElement('img');
            img.src = URL.createObjectURL(files[i]);
            previewContainer.appendChild(img);
        }
    }

    function viewEventDetails(eventId) {
        window.location.href = `/Organization/Details/${eventId}`;
    }

    document.addEventListener('DOMContentLoaded', function () {
        var deleteUrl = '@Url.Action("Delete", "Organization")';

        document.querySelectorAll('.delete-button').forEach(button => {
            button.addEventListener('click', function (event) {
                event.stopPropagation();  // Stop the click event from propagating to the row
                var form = this.closest('.delete-form');
                var eventId = form.getAttribute('data-event-id');

                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!',
                    allowOutsideClick: false,
                    allowEscapeKey: false
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Submit the form to delete the event
                        var xhr = new XMLHttpRequest();
                        xhr.open("POST", deleteUrl, true);
                        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                        xhr.onload = function() {
                            if (xhr.status === 200) {
                                Swal.fire({
                                    title: 'Deleted!',
                                    text: 'Your event has been deleted.',
                                    icon: 'success',
                                    allowOutsideClick: false,
                                    allowEscapeKey: false
                                });

                                // Remove the deleted event row from the table
                                form.closest('tr').remove();
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error!',
                                    text: 'There was an error deleting the event. Please try again.',
                                    allowOutsideClick: false,
                                    allowEscapeKey: false
                                });
                            }
                        };
                        xhr.send("eventId=" + eventId);
                    }
                });
            });
        });

        // Real-time validation for date and time inputs
        document.getElementById('CreateEvents_dateStart').addEventListener('input', function() {
            const dateStart = new Date(this.value);
            const now = new Date();
            if (dateStart < now) {
                document.getElementById('CreateEvents_dateStart_error').innerText = 'Start date and time must be in the future.';
                this.value = '';
            } else {
                document.getElementById('CreateEvents_dateStart_error').innerText = '';
            }
            validateEventDuration();
        });

        document.getElementById('CreateEvents_dateEnd').addEventListener('input', function() {
            validateEventDuration();
        });

        function validateEventDuration() {
            const dateStart = new Date(document.getElementById('CreateEvents_dateStart').value);
            const dateEnd = new Date(document.getElementById('CreateEvents_dateEnd').value);
            if (dateEnd <= dateStart) {
                document.getElementById('CreateEvents_dateEnd_error').innerText = 'End date and time must be after start date and time.';
                document.getElementById('CreateEvents_dateEnd').value = '';
                return;
            }
            const hoursDifference = (dateEnd - dateStart) / (1000 * 60 * 60);
            if (hoursDifference < 3) {
                document.getElementById('CreateEvents_dateEnd_error').innerText = 'Event duration must be at least 3 hours.';
                document.getElementById('CreateEvents_dateEnd').value = '';
            } else {
                document.getElementById('CreateEvents_dateEnd_error').innerText = '';
            }
        }
    });

    $(document).ready(function () {
        @if (TempData["Success"] != null && (bool)TempData["Success"])
        {
            <text>
            Swal.fire({
                title: 'Success!',
                text: 'The event has been created successfully.',
                icon: 'success',
                confirmButtonText: 'OK'
            });
            </text>
        }
    });
</script>
