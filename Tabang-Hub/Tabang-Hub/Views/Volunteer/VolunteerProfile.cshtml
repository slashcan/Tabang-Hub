@model Tabang_Hub.Utils.Lists
@{
    ViewBag.Title = "VolunteerProfile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@*<link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">*@
@*<link href="~/Content/css2/nav.css" rel="stylesheet" />*@
<link href="~/Content/css2/Profile.css" rel="stylesheet" />

<div class="container mt-5">
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-2 profile-section">
                    @foreach (var pic in Model.picture)
                    {
                        <img src="~/UserProfile/@pic.profilePath" id="profilePicPreview" class="img-fluid" alt="Profile Picture">
                    }
                    <div id="profile" class="mt-2 d-none">
                        <!-- Button appears only when in edit mode -->
                        <label for="profilePic" class="btn btn-outline-success change-photo-button">
                            <i class="bi bi-camera"></i> Change Photo
                        </label>
                        <input type="file" class="form-control-file" id="profilePic" accept="image/*" onchange="previewProfilePic()" style="display: none;">
                    </div>
                </div>

                @foreach (var VolInfo in Model.volunteersInfo)
                {
                    <div class="col-md-8">
                        <h4>@VolInfo.lName.ToUpper(), @VolInfo.fName.ToUpper()</h4>

                        <p class="mb-1"><strong>Email: </strong><span id="email">@VolInfo.UserAccount.email</span></p>
                        <!-- Email input removed from editing -->

                        <p id="address">
                            <strong>Address:</strong>
                            @VolInfo.street.Substring(0, 1).ToUpper()@VolInfo.street.Substring(1),
                            @VolInfo.city.Substring(0, 1).ToUpper()@VolInfo.city.Substring(1) City,
                            @VolInfo.province.Substring(0, 1).ToUpper()@VolInfo.province.Substring(1)
                        </p>
                        <div id="addressInput" class="d-none">
                            <input type="text" id="streetInput" class="form-control mb-1" value="@VolInfo.street" placeholder="Street" required>
                            <span class="error-message text-danger"></span>
                            <input type="text" id="cityInput" class="form-control mb-1" value="@VolInfo.city" placeholder="City" required>
                            <span class="error-message text-danger"></span>
                            <input type="text" id="provinceInput" class="form-control mb-1" value="@VolInfo.province" placeholder="Province" required>
                            <span class="error-message text-danger"></span>
                        </div>

                        <p class="mb-1"><strong>Contact number: </strong><span id="phone">@VolInfo.phoneNum</span></p>
                        <input type="text" id="phoneInput" class="form-control d-none" value="@VolInfo.phoneNum" pattern="^09[0-9]{9}$" title="Phone number should start with 09 and contain 11 digits" maxlength="11" required>
                        <span class="error-message text-danger"></span>

                        <!--<p class="mb-1"><strong>Email: </strong><span id="email">@VolInfo.UserAccount.email</span></p>-->
                        <!-- Email input removed from editing -->

                        <p class="mb-1"><strong>Availability: </strong><span id="availability">@VolInfo.availability</span></p>
                        <div id="availabilityInput" class="d-none">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="availability" id="fullTime" value="Full Time" @(VolInfo.availability == "Full Time" ? "checked" : "")>
                                <label class="form-check-label" for="fullTime">Full Time</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="availability" id="partTime" value="Part Time" @(VolInfo.availability == "Part Time" ? "checked" : "")>
                                <label class="form-check-label" for="partTime">Part Time</label>
                            </div>
                        </div>
                    </div>
                }

                <div class="col-md-2 text-right">
                    <button id="editButton" class="btn btn-outline-success" onclick="toggleEdit()">Edit</button>
                    <button id="cancelButton" class="btn btn-outline-danger d-none" onclick="cancelEdit()">Cancel</button>
                </div>
            </div>
        </div>
    </div>
    <div class="card mt-3">
        <div class="card-body">
            <div class="row">
                <div class="col-md-5">
                    <h5>About me</h5>
                    @foreach (var aboutVolunteer in Model.volunteersInfo)
                    {
                        <p class="mb-1">
                            <span id="aboutMe">
                                @aboutVolunteer.aboutMe
                            </span>
                        </p>
                        <textarea rows="5" id="aboutMeInput" class="form-control d-none">@aboutVolunteer.aboutMe</textarea>
                    }
                </div>
                <div class="col-md-5">
                    <h5>Skills</h5>
                    <div id="skillsDisplay">
                        @foreach (var UserSkill in Model.volunteersSkills)
                        {
                            var skillName = Model.skills.Where(m => m.skillId == UserSkill.skillId).Select(m => m.skillName).FirstOrDefault();

                            <span style="background-color: mediumseagreen; cursor: pointer" class="skill-badge" data-skill-id="@UserSkill.skillId">
                                @Html.Raw(skillName)
                                <span class="remove-skill d-none" onclick="removeSkill(this)">x</span>
                            </span>
                        }
                    </div>
                    <select id="skillsDropdown" class="form-control d-none mt-2" onchange="addSkill()">
                        <option value="" label="Select a skill"></option>
                        @foreach (var Skills in Model.uniqueSkill)
                        {
                            <option value="@Skills.skillId">@Skills.skillName</option>
                        }
                    </select>
                </div>
                <div class="col-md-2 text-right">
                    <button id="editButtonAboutMe" class="btn btn-outline-success" onclick="toggleEditAboutMe()">Edit</button>
                    <button id="cancelButtonAboutMe" class="btn btn-outline-danger d-none" onclick="cancelEditAboutMe()">Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <div class="card mt-3">
        <div class="card-body">
            <div class="row">
                <!-- Volunteer Summary Section -->
                <div class="col-md-5">
                    <h5>Volunteer Summary</h5>
                    <div class="mt-4">
                        @* Calculating the rate as before *@
                        @{
                            int? getRate = 0;
                            int count = Model.rating.Count();
                            int calculateRate = 0; // Declare calculateRate here so it's accessible

                            if (count > 0)
                            {
                                foreach (var rt in Model.rating.Select(m => m.rate))
                                {
                                    getRate += rt;
                                }
                                calculateRate = getRate.Value / count; // Update calculateRate here
                            }
                        }
                        <div>
                            <span class="rate-number">
                                <span>My Rate: &nbsp;</span>
                                <span style="color: #FFA500"><strong>@calculateRate &nbsp;</strong></span>
                            </span>
                            @for (int i = 0; i < calculateRate; i++)
                            {
                                <span style="color: #FFA500">★</span>
                            }
                            @for (int i = calculateRate; i < 5; i++)
                            {
                                <span style="color: #FFA500">☆</span>
                            }
                        </div>
                    </div>

                    <div class="mt-3">
                        Number of event(s) participated: &nbsp;<strong style="color: #FFA500">@Model.volunteersHistories.Count()</strong>
                    </div>
                    <div class="mt-3">
                        Number of skill(s): &nbsp;<strong style="color: #FFA500">@Model.volunteersSkills.Count()</strong>
                    </div>
                </div>

                <!-- Rank Skill Section with Dropdown next to the heading -->
                <div class="col-md-7">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Ratings</h5>
                        <!-- Dynamic Dropdown Section for sorting -->
                        <div class="form-group mb-0">
                            <select class="form-control" id="skillRankFilter" style="width: 200px;" onchange="filterSkills()">
                                <option value="Highest">Highest</option>
                                <option value="Lowest">Lowest</option>
                            </select>
                        </div>
                    </div>

                    <ul id="rankedSkillsList" class="list-group mt-3" style="max-height: 190px; overflow-y: auto;">
                        @foreach (var UserSkill in Model.volunteersSkills)
                        {
                            var skillName = Model.skills.Where(m => m.skillId == UserSkill.skillId).Select(m => m.skillName).FirstOrDefault();
                            var rating = Model.rating.Where(m => m.userId == UserSkill.userId && m.skillId == UserSkill.skillId).Select(m => m.rate).FirstOrDefault();

                            <li class="list-group-item skill-item" data-rating="@rating">
                                <strong>@Html.Raw(skillName)</strong> - @(rating > 0 ? $"{rating} stars" : "No rating available")
                                <div class="event-rating" style="color: #ffa500;">
                                    @if (rating.HasValue)
                                    {
                                        for (int i = 0; i < rating.Value; i++)
                                        {
                                            <span>★</span>
                                        }
                                        for (int i = rating.Value; i < 5; i++)
                                        {
                                            <span>☆</span>
                                        }
                                    }
                                    else
                                    {
                                        <span>No Rating</span>
                                    }
                                </div>
                            </li>
                        }
                        @* Each list item has a data attribute for the rating so we can sort dynamically *@
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <div class="card mt-3">
        <div class="card-body">
            <h5>Event History</h5>
            <!-- Static Example of a Compact Event History Entry -->
            @{
                var groupedEvents = Model.volunteersHistories
                    .GroupBy(vh => vh.eventId)
                    .Select(g => new
                    {
                        Event = g.First(),
                        Skills = g.Select(vh => new
                        {
                            vh.skillName,
                            Rating = Model.rating.Where(m => m.userId == vh.userId && m.skillId == vh.skillId && m.eventId == vh.eventId).Select(m => m.rate).FirstOrDefault()
                        }).ToList()
                    })
                    .ToList();
            }
            @foreach (var evt in groupedEvents.Take(2))
            {
                var vh = evt.Event;
                DateTime? originalDateStart = vh.dateStart;
                string formattedDateStart = originalDateStart.HasValue ? originalDateStart.Value.ToString("MMMM dd, yyyy") : "N/A";

                DateTime? originalDateEnd = vh.dateEnd;
                string formattedDateEnd = originalDateEnd.HasValue ? originalDateEnd.Value.ToString("MMMM dd, yyyy") : "N/A";
                <div class="event-card">
                    <!-- Event Details Section -->
                    <div class="event-details">
                        <h3 class="event-title">@vh.eventTitle</h3>
                        <p class="event-description">@vh.eventDescription</p>
                        <div class="event-dates">
                            Start Date: <strong>@formattedDateStart -</strong> End Date: <strong>@formattedDateEnd</strong>
                        </div>

                        <!-- Skills Section -->
                        <div class="skills-row d-flex justify-content-start flex-wrap mt-2">
                            @foreach (var skill in evt.Skills)
                            {
                                <div class="skill-item text-center" style="display: inline-flex; flex-direction: column; margin-right: 10px;">
                                    <span class="skill-badge">@skill.skillName</span>
                                    <div class="skill-rating" style="color: #ffa500;">
                                        @if (skill.Rating.HasValue)
                                        {
                                            <span>@skill.Rating.Value &nbsp;</span>
                                            for (int i = 0; i < skill.Rating.Value; i++)
                                            {
                                                <span>★</span>
                                            }
                                            for (int i = skill.Rating.Value; i < 5; i++)
                                            {
                                                <span>☆</span>
                                            }
                                        }
                                        else
                                        {
                                            <span>No Rating</span>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            <div class="mt-3">
                <a href="@Url.Action("Participate", "Volunteer", new { section = "historySection" })" class="view-more">View More</a>
            </div>
        </div>
    </div>



</div>
<br />
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="~/Content/Js2/profile.js"></script>
<script src="~/Content/Js2/rankskill.js"></script>