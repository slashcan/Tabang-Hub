﻿@model Tabang_Hub.Utils.Lists
@{
    ViewBag.Title = "EventDetails";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

@*<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>*@
@*<link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">*@
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

@*<link href="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">*@
@*<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css" rel="stylesheet">*@

@*<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">*@

<link href="~/Content/Css2/opportunityCarousel.css" rel="stylesheet" />
<style>
    .carousel-inner img {
        width: 100%;
        height: 500px; /* Set a fixed height for consistency */
        object-fit: cover;
    }

    .carousel-container {
        max-width: 600px;
        margin: 0 auto;
    }

    .event-description {
        margin-bottom: 20px;
        text-align: justify;
    }

    .event-details {
        margin: 18px 0px 18px 0px;
    }

    .org-description {
        text-align: justify;
    }

    .org-info h3 {
        margin-top: 10px;
    }

    .skills-required {
        margin-top: 30px;
        font-size: larger;
    }

    .skill-badge .badge {
        margin: 5px 5px 0 0;
    }


    .progress {
        position: relative;
        height: 30px;
        background-color: #e9ecef;
        border-radius: 0.25rem;
        overflow: hidden;
    }

    .progress-bar {
        height: 100%;
        background-color: #007bff;
    }

    .progress-label {
        position: absolute;
        width: 100%;
        text-align: center;
        left: 0;
        top: 0;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: black; /* Adjust color as needed */
    }

    #counter {
        margin-top: 10px;
    }

    .card-text {
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2; /* Limit to 2 lines */
        -webkit-box-orient: vertical;
    }

    .card-title {
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 1; /* Limit to 1 line */
        -webkit-box-orient: vertical;
    }
</style>

<div class="container mt-5">
    <div class="row">
        <div class="col-12 event-description">
            @foreach (var title in Model.orgEvents)
            {
                <h3>@title.eventTitle</h3>
            }
            @foreach (var orgDetails in Model.orgEvents)
            {
                <p>@orgDetails.eventDescription</p>
            }
        </div>
        <hr />
        <div class="row" style="background-color: #F0F8FF; margin: 0">
            <div class="col-md-8">
                <div id="carouselExampleDark" class="carousel carousel-dark slide" data-bs-ride="carousel">
                    <div class="carousel-indicators">
                        @for (int i = 0; i < Model.detailsEventImage.Count; i++)
                        {
                            <button type="button" data-bs-target="#carouselExampleDark" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")" aria-current="@(i == 0 ? "true" : "false")" aria-label="Slide @i"></button>
                        }
                    </div>
                    <div class="carousel-inner">
                        @for (int i = 0; i < Model.detailsEventImage.Count; i++)
                        {
                            <div class="carousel-item @(i == 0 ? "active" : "")">
                                <img src="@Url.Content("~/Content/IdPicture/" + Model.detailsEventImage[i].eventImage)" class="d-block w-100 img-fluid fixed-size-img" alt="Event Image" style="border-radius: 1rem; margin: 15px 0px 15px 0px;">
                            </div>
                        }
                    </div>
                    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
            </div>
            <div class="col-md-4 event-details" style="border-radius: 1rem; background-color: #FFFF">
                @foreach (var location in Model.listOfEvents)
                {
                    <i class="bi bi-geo-alt" style="font-size:24px;"></i> @location.Location

                    <div class="skills-required">
                        <h5>Skills Required</h5>
                        @foreach (var rk in Model.detailsSkillRequirement)
                        {
                            <span style="background-color: mediumseagreen" id="badge" class="badge badge-secondary skill-badge">
                                @rk.skillName
                            </span>
                        }
                    </div>
                    <div style="margin-top: 50px; color: dimgray" class="org-info">
                        <div class="d-flex align-items-center mb-2">
                            <i class="bi bi-calendar me-2" style="font-size:16px;"></i>
                            <span>@location.Start_Date <strong>-</strong> @location.End_Date</span>
                        </div>
                    </div>

                    <label id="counter">Volunteer counter</label>
                    <div class="progress">
                        @{
                            double? Vol = Model.volunteers.Where(m => m.Status == 1).Count();

                            Vol = (Vol / location.Max_Volunteer) * location.Max_Volunteer;
                            Console.Write(Vol);
                        }
                        <div class="progress-bar" role="progressbar" style="width: @Html.Raw(Vol)%; background-color: mediumseagreen;" aria-valuenow="@location.Max_Volunteer" aria-valuemin="0" aria-valuemax="100"></div>
                        <div class="progress-label">@Model.volunteers.Where(m => m.Status == 1).Count()/@location.Max_Volunteer</div>
                    </div>
                }
                <hr />


                <div class="apply-button mt-2">
                    @foreach (var orgDetails in Model.orgEvents)
                    {
                        <button style="width: 100%" onclick="applyEvent('@orgDetails.eventId')" class="btn btn-primary btn-block">
                            Apply now
                        </button>
                        if (orgDetails.targetAmount != null)
                        {
                            foreach (var evnt in Model.listOfEvents)
                            {
                                <div class="donation-progress">
                                    <label>Fund Raised</label>
                                    <div class="progress">
                                        @{
                                            decimal? raisedAmount = 0;

                                            foreach (var donated in Model.listofUserDonated)
                                            {
                                                raisedAmount += donated.amount;
                                            }

                                            var percentage = (raisedAmount / evnt.Target_Amount) * 100;
                                        }
                                        <div class="progress-bar" role="progressbar" style="width: @percentage%; background-color: mediumseagreen;" aria-valuenow="@raisedAmount" aria-valuemin="0" aria-valuemax="@evnt.Target_Amount"></div>
                                        <div class="progress-label">@($"{raisedAmount:₱#,##0.00}") / @($"{evnt.Target_Amount:₱#,##0.00}")</div>
                                    </div>
                                </div>
                                <div class="donate-button mt-2">
                                    <!-- Button to open the donation modal -->
                                    <button style="width: 100%" type="button" class="btn btn-primary btn-block" data-toggle="modal" data-target="#donationModal">
                                        Donate
                                    </button>
                                </div>

                                <!-- Donation Modal -->
                                <div class="modal fade" id="donationModal" tabindex="-1" role="dialog" aria-labelledby="donationModalLabel" aria-hidden="true">
                                    <div class="modal-dialog" role="document">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title" id="donationModalLabel">Make a Donation</h5>
                                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                    <span aria-hidden="true">&times;</span>
                                                </button>
                                            </div>
                                            <div class="modal-body">
                                                <form id="donationForm">
                                                    <div class="form-group">
                                                        <label for="donationAmount">Donation Amount</label>
                                                        <input type="number" class="form-control" id="donationAmount" min="1" required>
                                                    </div>
                                                </form>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                                <button type="button" class="btn btn-primary" onclick="submitDonation('@orgDetails.eventId')">Donate</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    }
                </div>
                <br />
            </div>
        </div>
    </div>
</div>
<br />
<hr />

<div class="container mt-5">
    <div style="text-align: center">
        <h1>Organization</h1>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="row">
                @foreach (var info in Model.orgInfos)
                {
                    <div class="col-md-7 org-description">
                        <h6><a class="orgName" href="@Url.Action("OrganizationProfile", "Volunteer", new {info.userId})" style="color: black">@info.orgName</a></h6>
                        <p>
                            @info.orgDescription
                        </p>

                    </div>
                    <div class="col-md-3">
                        <h6>Contact us</h6>
                        <p>
                            <i style="font-size:15px" class="fa">&#xf095;</i> @info.phoneNum
                        </p>

                        <p>
                            <i style="font-size:15px" class="fa">&#xf1a0;</i> @info.orgEmail
                        </p>

                        <p>
                            <i style="font-size:15px" class="fa">&#xf09a;</i> Facebook
                        </p>

                        <p>
                            <i style="font-size:15px" class="fa">&#xf16d;</i> Instagram
                        </p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="similar-opportunities-container" style="background-color: #F0F8FF;">
    <div class="header">
        <h2>Be Involved</h2>
        @*<a href="#" class="see-all">See all</a>*@
    </div>
    <div class="similar-opportunities-carousel">
        <div class="carousel-buttons-opportunities">
            <button class="carousel-button-opportunities prev-button-opportunities">&lt;</button>
            <button class="carousel-button-opportunities next-button-opportunities">&gt;</button>
        </div>
        <div class="carousel-track-opportunities">
            @foreach (var lstEvent in Model.orgOtherEvent)
            {
                <div class="opportunity-card">
                    <img src="~/Content/images/tabanghub3.png" alt="">
                    <div class="card-content">
                        @*<p>PROJECT | 6-7 WEEKS</p>*@
                        <h3 class="card-title">@lstEvent.Event_Title</h3>
                        <p class="card-text">@lstEvent.Event_Description</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<br />

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
@*<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.6/js/bootstrap.bundle.min.js"></script>*@

<script>
    function submitDonation(eventId) {
        var donationAmount = document.getElementById('donationAmount').value;

        $.ajax({
            url: '@Url.Action("DonateNow", "Volunteer")',
            type: 'POST',
            data: {
                eventId: eventId,
                amount: donationAmount
            },
            success: function (response) {
                if (response.success) {
                    Swal.fire({
                        title: '',
                        text: 'Your donation has been received.',
                        icon: 'success',
                        confirmButtonText: 'OK'
                    }).then(() => {
                        //$('#donationModal').modal('hide');
                        //document.getElementById('donationForm').reset();
                        location.reload();
                    });
                } else {
                    Swal.fire({
                        title: '',
                        text: 'ERRRRROOOOORRR',
                        icon: 'warning',
                        confirmButtonText: 'OK'
                    })
                    console.log(userId);
                }
            },
            error: function (xhr, status, error) {
                console.log("Error: " + error);
            }
        });
    }

    function applyEvent(eventId) {
        $.ajax({
        url: '@Url.Action("ApplyVolunteer", "Volunteer")',
        type: 'POST',
        data: {
            eventId: eventId
        },
        success: function (response) {
            if (response.success) {
                Swal.fire({
                    title: response.message,
                    text: '',
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => {
                    location.reload();
                });
            } else {
                let title;
                if (response.message == "No match Skill.") {
                    title = "Skill Mismatch!"
                } else if (response.message == "Already apply."){
                    title = "Duplicate Application!"
                }
                Swal.fire({
                    title: response.message,
                    text: '',
                    icon: 'warning',
                    confirmButtonText: 'OK'
                });
            }
        },
        error: function (xhr, status, error) {
            Swal.fire({
                title: 'Error!',
                text: 'There was an issue with your application. Please try again later.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    })
    }


    const track = document.querySelector('.carousel-track-opportunities');
    const prevButton = document.querySelector('.prev-button-opportunities');
    const nextButton = document.querySelector('.next-button-opportunities');
    const cards = Array.from(track.children);
    const cardWidth = cards[0].getBoundingClientRect().width + 20; // +20 for margin-right

    let currentIndex = 0;

    function updateCarousel() {
        track.style.transform = 'translateX(' + (-currentIndex * cardWidth) + 'px)';
        // Ensure visibility logic is set correctly
        toggleNavButtons();
    }

    nextButton.addEventListener('click', () => {
        if (currentIndex < cards.length - 3) {
            currentIndex++;
        } else {
            currentIndex = 0; // Reset to the first card to loop
        }
        updateCarousel();
    });

    prevButton.addEventListener('click', () => {
        if (currentIndex > 0) {
            currentIndex--;
        } else {
            currentIndex = cards.length - 3; // Go to the last possible start position
        }
        updateCarousel();
    });

    function toggleNavButtons() {
        // Ensure the back button is always visible
        prevButton.style.visibility = 'visible';
        // The next button is always visible, no need to hide it
        nextButton.style.visibility = 'visible';
    }

    // Initial setup
    updateCarousel();
    toggleNavButtons();

    // Window resize listener to adjust visibility of navigation buttons
    window.addEventListener('resize', () => {
        if (window.innerWidth <= 770) {
            prevButton.style.visibility = 'hidden';
            nextButton.style.visibility = 'hidden';
        } else {
            // Recheck visibility on wider screens
            toggleNavButtons();
        }
    }); prevButton.addEventListener('click', () => {
        if (currentIndex > 0) {
            currentIndex--;
        } else {
            currentIndex = cards.length - 3; // Reset to the last possible start position
        }
        updateCarousel();
    });

    updateCarousel(); // Initial update
</script>