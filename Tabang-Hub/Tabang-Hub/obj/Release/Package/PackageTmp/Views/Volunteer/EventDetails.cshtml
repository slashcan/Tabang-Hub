﻿@model Tabang_Hub.Utils.Lists
@{
    ViewBag.Title = "EventDetails";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<link href="~/Content/css2/Eventdetails.css" rel="stylesheet" />
<style>
    body {
        padding-top: 70px;
    }
</style>
@if (Model.volunteer != null && Model.volunteer.Status == 2)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-12 event-description">
                @foreach (var title in Model.orgEvents)
                {
                    <h3>@title.eventTitle</h3>
                }
                @foreach (var orgDetails in Model.orgEvents)
                {
                    <p>@orgDetails.eventDescription</p>
                }
            </div>
            <hr />
            <div class="row" style="background-color: #F0F8FF; margin: 0">
                <div class="col-md-8">
                    <div id="carouselExampleDark" class="carousel carousel-dark slide" data-bs-ride="carousel">
                        <div class="carousel-indicators">
                            @for (int i = 0; i < Model.detailsEventImageOne.Count; i++)
                            {
                                <button type="button" data-bs-target="#carouselExampleDark" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")" aria-current="@(i == 0 ? "true" : "false")" aria-label="Slide @i"></button>
                            }
                        </div>
                        <div class="carousel-inner">
                            @for (int i = 0; i < Model.detailsEventImageOne.Count; i++)
                            {
                                <div class="carousel-item @(i == 0 ? "active" : "")">
                                    <img src="@Url.Content("~/Content/Events/" + Model.detailsEventImageOne[i].eventImage)" class="d-block w-100 img-fluid fixed-size-img" alt="Event Image" style="border-radius: 1rem; margin: 15px 0px 15px 0px;">
                                </div>
                            }
                        </div>
                        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>
                    </div>
                </div>
                <div class="col-md-4 event-details" style="border-radius: 1rem; background-color: #FFFF">
                    @foreach (var location in Model.listOfEventsOne)
                    {
                        DateTime? originalDateStart = location.Start_Date;
                        string formattedDateStart = originalDateStart.HasValue ? originalDateStart.Value.ToString("MMMM dd, yyyy hh:mm tt") : "N/A";

                        DateTime? originalDateEnd = location.End_Date;
                        string formattedDateEnd = originalDateEnd.HasValue ? originalDateEnd.Value.ToString("MMMM dd, yyyy hh:mm tt") : "N/A";

                        <i class="bi bi-geo-alt" style="font-size:24px;"></i> @location.location

                        <div class="skills-required">
                            <h5>Skills Required</h5>
                            @foreach (var rk in Model.detailsSkillRequirement)
                            {

                                var skillName = Model.skills.Where(m => m.skillId == rk.skillId).Select(m => m.skillName).FirstOrDefault();

                                <span style="background-color: mediumseagreen" id="badge" class="badge badge-secondary skill-badge">
                                    @Html.Raw(skillName)
                                </span>
                            }
                        </div>
                        <div style="margin-top: 50px; color: dimgray" class="org-info">
                            <div class="d-flex align-items-center mb-2">
                                <i class="bi bi-calendar me-2" style="font-size:16px;"></i>
                                <span>@formattedDateStart<strong>-</strong> @formattedDateEnd</span>
                            </div>
                        </div>

                        <label id="counter">Number of Volunteers</label>
                        <div class="progress">
                            @{
                                int currentVolunteers = Model.volunteers.Where(m => m.Status == 1).Count();
                                int? maxVolunteers = location.Maximum_Volunteer;
                                double? progressPercentage = (double)currentVolunteers / maxVolunteers * 100;
                                Console.WriteLine(progressPercentage);
                            }
                            <div class="progress-bar" role="progressbar"
                                 style="width: @progressPercentage%; background-color: mediumseagreen;"
                                 aria-valuenow="@currentVolunteers"
                                 aria-valuemin="0"
                                 aria-valuemax="@maxVolunteers">
                            </div>
                            <div class="progress-label">
                                @currentVolunteers / @maxVolunteers
                            </div>
                        </div>

                    }

                    <div class="apply-button mt-2">
                        @foreach (var orgDetails in Model.orgEvents)
                        {
                            bool hasAllRequiredSkills = Model.detailsSkillRequirement
                                .All(reqSkill => Model.volunteersSkills.Any(volSkill => volSkill.skillId == reqSkill.skillId));

                            if (hasAllRequiredSkills)
                            {
                                if (orgDetails.dateStart <= DateTime.Now)
                                {
                                    <div class="join-button mt-2 mb-2" style="width: 100%; padding: 10px; background-color: mediumseagreen; color: white; text-align: center">
                                        <span>
                                            Ongoing Event
                                        </span>
                                    </div>
                                }
                                // Display join buttons if all required skills are met
                                if (!Model.volunteersStatusEvent.Count().Equals(0))
                                {
                                    foreach (var status in Model.volunteersStatusEvent)
                                    {
                                        var getDateOfEvent = Model.listOfEventsOne.FirstOrDefault();
                                        if (status.Status.Equals(1) && Model.volunteersStatusEvent.Count() != 0 && getDateOfEvent.Start_Date > DateTime.Now)
                                        {
                                            <button style="width: 100%" onclick="leaveEvent('@orgDetails.eventId')" class="btn btnRequest">
                                                Leave event
                                            </button>
                                        }
                                        else if (status.Status.Equals(0) && Model.volunteersStatusEvent.Count() != 0)
                                        {
                                            <button style="width: 100%" onclick="cancelEvent('@orgDetails.eventId')" class="btn btnRequest">
                                                Cancel application
                                            </button>
                                        }
                                        else
                                        {
                                            <div class="action-buttons mt-2">
                                                <div class="d-flex justify-content-between">
                                                    <!-- Accept Button -->
                                                    <button type="button" class="btn btn-success flex-fill me-1" onclick="acceptEvent('@orgDetails.eventId')" @*data-toggle="modal" data-target="#acceptEventModal"*@ data-event-id="@orgDetails.eventId" id="acceptButton">
                                                        Accept Invitation
                                                    </button>
                                                    <!-- Decline Button -->
                                                    <button type="button" class="btn btn-danger flex-fill ms-1" onclick="declineInvite('@orgDetails.eventId')" data-event-id="@orgDetails.eventId" id="declineButton">
                                                        Decline Invitation
                                                    </button>
                                                </div>
                                            </div>

                                        }
                                    }
                                }

                                if (orgDetails.targetAmount != null)
                                {
                                    foreach (var evnt in Model.listOfEventsOne)
                                    {
                                        <div class="donation-progress">
                                            <label>Funds raised</label>
                                            <div class="progress">
                                                @{
                                                    decimal? raisedAmount = 0;

                                                    foreach (var donated in Model.listofUserDonated)
                                                    {
                                                        raisedAmount += donated.amount;
                                                    }

                                                    var percentage = (raisedAmount / evnt.Target_Amount) * 100;
                                                }
                                                <div class="progress-bar" role="progressbar" style="width: @percentage%; background-color: mediumseagreen;" aria-valuenow="@raisedAmount" aria-valuemin="0" aria-valuemax="@evnt.Target_Amount"></div>
                                                <div class="progress-label">@($"{raisedAmount:₱#,##0.00}") / @($"{evnt.Target_Amount:₱#,##0.00}")</div>
                                            </div>
                                        </div>
                                        <div class="donate-button mt-2">
                                            <!-- Button to open the donation modal -->
                                            <button style="width: 100%" type="button" class="btn btn-primary btn-block" data-toggle="modal" data-target="#donationModal">
                                                Donate
                                            </button>
                                        </div>

                                        <!-- Donation Modal -->
                                        <div class="modal fade" id="donationModal" tabindex="-1" role="dialog" aria-labelledby="donationModalLabel" aria-hidden="true">
                                            <div class="modal-dialog modal-dialog-centered" role="document">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <h5 class="modal-title" id="donationModalLabel">Donate</h5>
                                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                            <span aria-hidden="true">&times;</span>
                                                        </button>
                                                    </div>
                                                    <div class="modal-body">
                                                        <form id="donationForm">
                                                            <div class="form-group">
                                                                <label for="donationAmount">Amount</label>
                                                                <input type="number" class="form-control" id="donationAmount" min="1" required>
                                                            </div>
                                                        </form>
                                                    </div>
                                                    <div class="modal-footer">
                                                        <button type="button" class="btn btn-primary" onclick="submitDonation('@orgDetails.eventId')">Donate</button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            }
                        }
                    </div>
                    <br />
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-12 event-description">
                @foreach (var title in Model.orgEvents)
                {
                    <h3>@title.eventTitle</h3>
                }
                @foreach (var orgDetails in Model.orgEvents)
                {
                    <p>@orgDetails.eventDescription</p>
                }
            </div>
            <hr />
            <div class="row" style="background-color: #F0F8FF; margin: 0">
                <div class="col-md-8">
                    <div id="carouselExampleDark" class="carousel carousel-dark slide" data-bs-ride="carousel">
                        <div class="carousel-indicators">
                            @for (int i = 0; i < Model.detailsEventImageOne.Count; i++)
                            {
                                <button type="button" data-bs-target="#carouselExampleDark" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")" aria-current="@(i == 0 ? "true" : "false")" aria-label="Slide @i"></button>
                            }
                        </div>
                        <div class="carousel-inner">
                            @for (int i = 0; i < Model.detailsEventImageOne.Count; i++)
                            {
                                <div class="carousel-item @(i == 0 ? "active" : "")">
                                    <img src="@Url.Content("~/Content/Events/" + Model.detailsEventImageOne[i].eventImage)" class="d-block w-100 img-fluid fixed-size-img" alt="Event Image" style="border-radius: 1rem; margin: 15px 0px 15px 0px;">
                                </div>
                            }
                        </div>
                        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleDark" data-bs-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>
                    </div>
                </div>
                <div class="col-md-4 event-details" style="border-radius: 1rem; background-color: #FFFF">
                    @foreach (var location in Model.listOfEventsOne)
                    {
                        DateTime? originalDateStart = location.Start_Date;
                        string formattedDateStart = originalDateStart.HasValue ? originalDateStart.Value.ToString("MMMM dd, yyyy hh:mm tt") : "N/A";

                        DateTime? originalDateEnd = location.End_Date;
                        string formattedDateEnd = originalDateEnd.HasValue ? originalDateEnd.Value.ToString("MMMM dd, yyyy hh:mm tt") : "N/A";

                        <i class="bi bi-geo-alt" style="font-size:24px;"></i> @location.location

                        <div class="skills-required">
                            <h5>Skill/s Required</h5>
                            @foreach (var rk in Model.detailsSkillRequirement)
                            {

                                var skillName = Model.skills.Where(m => m.skillId == rk.skillId).Select(m => m.skillName).FirstOrDefault();

                                <span style="background-color: mediumseagreen" id="badge" class="badge badge-secondary skill-badge">
                                    @Html.Raw(skillName)
                                </span>
                            }
                        </div>
                        <div style="margin-top: 50px; color: dimgray" class="org-info">
                            <div class="d-flex align-items-center mb-2">
                                <i class="bi bi-calendar me-2" style="font-size:16px;"></i>
                                <span><strong>Start: </strong>@formattedDateStart <strong>-</strong> <br /><strong>End: </strong>@formattedDateEnd</span>
                            </div>
                        </div>

                        <label id="counter">Number of volunteers joined</label>
                        <div class="progress">
                            @{
                                int currentVolunteers = Model.volunteers.Where(m => m.Status == 1).Count();
                                int? maxVolunteers = location.Maximum_Volunteer;
                                double? progressPercentage = (double)currentVolunteers / maxVolunteers * 100;
                                Console.WriteLine(progressPercentage);
                            }
                            <div class="progress-bar" role="progressbar"
                                 style="width: @progressPercentage%; background-color: mediumseagreen;"
                                 aria-valuenow="@currentVolunteers"
                                 aria-valuemin="0"
                                 aria-valuemax="@maxVolunteers">
                            </div>
                            <div class="progress-label">
                                @currentVolunteers / @maxVolunteers
                            </div>
                        </div>
                    }

                <div class="apply-button mt-2">
                    @foreach (var orgDetails in Model.orgEvents)
                    {
                        if (!Model.volunteersStatusEvent.Count().Equals(0))
                        {
                            var getVolStatus = Model.volunteersStatusEvent.Select(m => m.Status).FirstOrDefault();
                            //foreach (var status in Model.volunteersStatusEvent)
                            //{

                            if (orgDetails.dateStart <= DateTime.Now)
                            {
                                <div class="join-button mt-2 mb-2" style="width: 100%; padding: 10px; background-color: mediumseagreen; color: white; text-align: center">
                                    <span>
                                        Ongoing Event
                                    </span>
                                </div>
                            }

                            if (getVolStatus.Equals(1) && Model.volunteersStatusEvent.Count() != 0)
                            {
                                <button style="width: 100%" onclick="leaveEvent('@orgDetails.eventId')" class="btn btnRequest">
                                    Leave event
                                </button>
                            }
                            else if (getVolStatus.Equals(0) && Model.volunteersStatusEvent.Count() != 0)
                            {
                                <button style="width: 100%" onclick="cancelEvent('@orgDetails.eventId')" class="btn btnRequest">
                                    Cancel application
                                </button>
                            }
                            //}
                        }
                        if (Model.volunteersStatusEvent.Count().Equals(0))
                        {
                            bool hasAllRequiredSkills = Model.detailsSkillRequirement
                                .All(reqSkill => Model.volunteersSkills.Any(volSkill => volSkill.skillId == reqSkill.skillId));
                            if (hasAllRequiredSkills)
                            {
                                if (@orgDetails.dateStart <= DateTime.Now)
                                {
                                    <div class="join-button mt-2 mb-2" style="width: 100%; padding: 10px; background-color: mediumseagreen; color: white; text-align: center">
                                        <span>
                                            Ongoing Event
                                        </span>
                                    </div>
                                }
                                else
                                {
                                    <div class="join-button mt-2">
                                        <button style="width: 100%" type="button" class="btn btn-primary btn-block" onclick="applyEvent('@orgDetails.eventId')">
                                            Join now
                                        </button>
                                    </div>
                                }
                            }
                        }

                        if (orgDetails.targetAmount != null)
                        {
                            foreach (var evnt in Model.listOfEventsOne)
                            {
                                <div class="donation-progress">
                                    <label>Fund Raised</label>
                                    <div class="progress">
                                        @{
                                            decimal? raisedAmount = 0;

                                            foreach (var donated in Model.listofUserDonated)
                                            {
                                                raisedAmount += donated.amount;
                                            }

                                            var percentage = (raisedAmount / evnt.Target_Amount) * 100;
                                        }
                                        <div class="progress-bar" role="progressbar" style="width: @percentage%; background-color: mediumseagreen;" aria-valuenow="@raisedAmount" aria-valuemin="0" aria-valuemax="@evnt.Target_Amount"></div>
                                        <div class="progress-label">@($"{raisedAmount:₱#,##0.00}") / @($"{evnt.Target_Amount:₱#,##0.00}")</div>
                                    </div>
                                </div>
                                <div class="donate-button mt-2">
                                    <!-- Button to open the donation modal -->
                                    <button style="width: 100%" type="button" class="btn btn-primary btn-block" data-toggle="modal" data-target="#donationModal">
                                        Donate
                                    </button>
                                </div>

                                <!-- Donation Modal -->
                                <div class="modal fade" id="donationModal" tabindex="-1" role="dialog" aria-labelledby="donationModalLabel" aria-hidden="true">
                                    <div class="modal-dialog modal-dialog-centered" role="document">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title" id="donationModalLabel">Donate</h5>
                                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                    <span aria-hidden="true">&times;</span>
                                                </button>
                                            </div>
                                            <div class="modal-body">
                                                <form id="donationForm">
                                                    <div class="form-group">
                                                        <label for="donationAmount">Amount</label>
                                                        <input type="number" class="form-control" id="donationAmount" min="1" required>
                                                    </div>
                                                </form>
                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-primary" onclick="submitDonation('@orgDetails.eventId')">Donate</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    }
                </div>
                    <br />
                </div>
            </div>
        </div>
    </div>
}
<br />
<hr />

<div class="container mt-5">
    <div style="text-align: center">
        <h1>Organization</h1>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="row">
                @foreach (var info in Model.orgInfos)
                {
                    <div class="col-md-7 org-description">
                        <h6><a class="orgName" href="@Url.Action("OrganizationProfile", "Volunteer", new {info.userId})" style="color: black">@info.orgName</a></h6>
                        <p>
                            @info.orgDescription
                            An organization in the system represents a group or entity that creates and manages volunteer opportunities, events, and donation activities. Organizations can post events, specify the skills needed, track volunteer participation, and generate reports to evaluate the impact of their initiatives.
                        </p>

                    </div>
                    <div class="col-md-3">
                        <h6>Contact us</h6>
                        <p>
                            <i style="font-size:15px" class="fa">&#xf095;</i> @info.phoneNum
                        </p>

                        <p>
                            <i style="font-size:15px" class="fa">&#xf1a0;</i> @*@info.orgEmail*@ <a href="#">@info.orgEmail@*organization@gmail.com*@</a>
                        </p>

                        @*<p>
                                <i style="font-size:15px" class="fa">&#xf09a;</i> <a href="#">Tabang.Hub</a>
                            </p>

                            <p>
                                <i style="font-size:15px" class="fa">&#xf16d;</i> <a href="#">TabangHub</a>
                            </p>*@
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<br />

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<script>
// Function to handle donation with PayMongo
function submitDonation(eventId) {
    var donationAmount = document.getElementById('donationAmount').value;

    $.ajax({
        url: '@Url.Action("DonateNow", "Volunteer")',
        type: 'POST',
        data: {
            eventId: eventId,
            amount: donationAmount
        },
        success: function (response) {
            if (response.success) {
                window.location.href = response.checkoutUrl; // Redirect to checkout URL
            } else {
                Swal.fire({
                    title: 'Error',
                    text: response.message,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        },
        error: function (xhr, status, error) {
            Swal.fire({
                title: 'Error',
                text: 'An unexpected error occurred. Please try again later.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    });
}

// Function to apply for an event
function applyEvent(eventId) {
    $.ajax({
        url: '@Url.Action("ApplyVolunteer", "Volunteer")',
        type: 'POST',
        data: { eventId: eventId },
        success: function (response) {
            if (response.success) {
                Swal.fire({
                    title: response.message,
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => {
                    location.reload();
                });
            } else {
                let title;
                if (response.message === "No match Skill.") {
                    title = "Skill Mismatch!";
                } else if (response.message === "Already apply.") {
                    title = "Duplicate Application!";
                }
                Swal.fire({
                    title: response.message,
                    icon: 'warning',
                    confirmButtonText: 'OK'
                });
            }
        },
        error: function (xhr, status, error) {
            Swal.fire({
                title: 'Error!',
                text: 'There was an issue with your application. Please try again later.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    });
}

// Function to cancel an application
function cancelEvent(eventId) {
    Swal.fire({
        title: '',
        text: 'Do you really want to cancel this application?',
        icon: 'info',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No'
    }).then((result) => {
        if (result.isConfirmed) {
            $.ajax({
                url: '@Url.Action("CancelRequest", "Volunteer")',
                type: 'POST',
                data: { eventId: eventId },
                success: function (response) {
                    if (response.success) {
                        Swal.fire({
                            title: response.message,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            location.reload();
                        });
                    }
                },
                error: function (xhr, status, error) {
                    Swal.fire({
                        title: 'Error',
                        text: 'An error occurred. Please try again.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            });
        }
    });
}

// Function to leave an event
function leaveEvent(eventId) {
    Swal.fire({
        title: 'Confirm Leave',
        text: 'Are you sure you want to leave this event?',
        icon: 'info',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No'
    }).then((result) => {
        if (result.isConfirmed) {
            $.ajax({
                url: '@Url.Action("LeaveEvent", "Volunteer")',
                type: 'POST',
                data: { eventId: eventId },
                success: function (response) {
                    if (response.success) {
                        Swal.fire({
                            title: response.message,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            location.reload();
                        });
                    }
                },
                error: function (xhr, status, error) {
                    Swal.fire({
                        title: 'Error',
                        text: 'An error occurred. Please try again.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            });
        }
    });
}

// Function to accept an event invitation
function acceptEvent(eventId) {
    //var selectedSkill = document.querySelector('input[name="skill"]:checked').value;

    $.ajax({
        url: '@Url.Action("AcceptInvite", "Volunteer")',
        type: 'POST',
        data: {
            eventId: eventId,
            //skill: selectedSkill
        },
        success: function (response) {
            if (response.success) {
                Swal.fire({
                    title: response.message,
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire({
                    title: response.message,
                    icon: 'warning',
                    confirmButtonText: 'OK'
                });
            }
        },
        error: function (xhr, status, error) {
            Swal.fire({
                title: 'Error!',
                text: 'There was an issue with your application. Please try again later.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    });
}

// Function to decline an event invitation
function declineInvite(eventId) {
    Swal.fire({
        title: '',
        text: 'Do you really want to decline this invitation?',
        icon: 'info',
        showCancelButton: true,
        confirmButtonText: 'Yes',
        cancelButtonText: 'No'
    }).then((result) => {
        if (result.isConfirmed) {
            $.ajax({
                url: '@Url.Action("DeclineInvite", "Volunteer")',
                type: 'POST',
                data: { eventId: eventId },
                success: function (response) {
                    if (response.success) {
                        Swal.fire({
                            title: response.message,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then(() => {
                            location.reload();
                        });
                    }
                },
                error: function (xhr, status, error) {
                    Swal.fire({
                        title: 'Error',
                        text: 'An error occurred. Please try again.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            });
        }
    });
}

// Carousel logic
document.addEventListener('DOMContentLoaded', () => {
    const prevButton = document.querySelector('.carousel-control-prev');
    const nextButton = document.querySelector('.carousel-control-next');
    const carouselInner = document.querySelector('.carousel-inner');
    const totalItems = carouselInner ? carouselInner.children.length : 0;

    // Function to toggle the visibility of carousel navigation buttons
    function toggleNavButtons() {
        if (totalItems <= 1) {
            prevButton.style.display = 'none';
            nextButton.style.display = 'none';
        } else {
            prevButton.style.display = 'block';
            nextButton.style.display = 'block';
        }
    }

    toggleNavButtons(); // Initial check for button visibility

    // Window resize listener to adjust button visibility
    window.addEventListener('resize', () => {
        if (window.innerWidth <= 770) {
            prevButton.style.visibility = 'hidden';
            nextButton.style.visibility = 'hidden';
        } else {
            toggleNavButtons();
        }
    });
});

</script>